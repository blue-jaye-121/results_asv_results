{"project": "metpy", "project_url": "https://unidata.github.io/MetPy/latest/", "show_commit_url": "http://github.com/unidata/metpy/commit/", "hash_length": 8, "revision_to_hash": {"327": "ab6c1dce403f7403c3ceb588536e8dac44208c63", "493": "b3ef1226fe06881448f1f1cf7fe308e6f8187c05", "536": "ac1fa42d9852eb0140cbdf42e2223b839ba13fde", "637": "5b4b97a6b9ef97f35fac6643b1d9caa395dbff55", "682": "db120ecf9d6094c3c0c3f2778d5cd4a4c776c773", "793": "363e313c36c0165991b07a219783774c97a38af8", "910": "421fcbc3f82fc104a2f48ea4d3b7b387cd945999", "1049": "81c28f9b3547d0e08ce5d240354c69aa73f8b041", "1089": "fd6f68542e1c1dbdb2ca9e68d24a1fc21a925649", "1130": "63a5224ce980cb44086685fe01eeaaed9998a698", "1331": "c2c19a3014bfb5f0d6b95bbbf9c8f9caadb17366", "1567": "2b685023351a89168a7e06c3858ff3493af670e7", "1590": "91ddb99935d9d0358b6b697bc1a0eabe9c96b145", "1882": "c5249c22782ca628fa328bbc28d98017dd868555", "2022": "d29088091fce085f52892539412e54c9eb02ab2e", "2174": "ba13b4c307791de6bfd69386959fe3da4efdeeeb", "2513": "987935135ac4770bd39c2902d48643866f29ef7e", "2635": "f47ebee7ce199b9d11d9db8fdf5cd258fd663052", "2644": "e4161106b5e060f525c58549f24efddd63aa35b6", "2686": "d0d44e898de3f5fb3d360152c06c5000e4bdba55", "2775": "cee9d4de5bc37a4cd2efc381f0a08f3a53d00940", "2957": "cdfad571efa697b7c081e405aeab3bc1ce8ced70", "3227": "a31af2335dfd3d28b6fff91ae21a86e2b565fa70", "3269": "8c1ca0ab748a253cc254317638bc080cfe323a3c", "3432": "0653de86b35b4c44ac7e6d47385d9b34cc822b76", "3534": "852e2cef374da385c0f1d0393bf5ae349dbd3bb7", "3618": "abad235b1e61f1048cf67c3fde06f4388e33bbbf", "3880": "776bacd1df2f8b98ebd475143da13dddd202fd06", "4161": "f8d2fcdb46bdfaf978f2b5d59a0d79ae185a1bb3", "4466": "bdc596470c925cdf91eec6df40deb5f638d002ee", "4835": "fabdf834f8717052c761e6b41a96fa064d9d2edb", "5363": "2f4de6683acdabdc87351eeafa58ff69f0904bee", "6037": "df6f7c543ec4278dfda4b609caee5dc232d52e41", "6269": "ed1b2c3c407b0998926b225167094474365bd763", "6599": "02084cc86bebd6a85f8c2dae493463421fc7563b", "7259": "8aa10736846a12e2aa976bbc5fcb591fb54c938c", "7427": "c8379a147d6542b729eed5ccb28b1ff0d883741c", "7692": "71b9b41a6ad63be051ea82e230c3dabf348e0ab1", "7794": "3d0238578e35f87a3bd48d77860d858c4ec3884a", "8497": "7a5e4cc34e62e632017335ca31b343cd79602538", "8526": "059cc1a45be63a2d86ba0801baa624e251bba487", "8527": "aef42710b63828f4d8cb05097f6562141ef293a2", "8538": "fcd883d749c0e596d8950f83ed26c7810e3b280d", "8549": "aa9f3cfd723bf8cef639b4e4aaae174fa223f473", "8599": "698f5441b5896aa6efdf84cdccaf711845a8bd23", "8612": "26e000da4e2f1d7e32e6fb81f88f6f35aa248528", "8645": "8ccabb740dd0afe3194b57b80d3af63b7f78671b", "8647": "d9752c8df8ed70b49da9ed98fb52db24d54a1f71", "8665": "bd432b3068744a605d5e8eeab472b167ba256012", "8677": "ccaf5095715327b75d1a92d98c91616eb607e0c5", "8699": "5fc0531fcab555b37e1c4d33e637ad72702b322c", "8704": "8f510ae51fe0478ba208711bb7468efca0296ade", "8724": "0ed75dc84c74d62be9b29321bb844289ed37eced", "8728": "846a2d0bbe707163e17289e514899e52653dcd09", "8734": "6b4c6ec864f35f6c53754d3708ea95dde519745c", "8747": "238d66dd5d7059ab5d812decfe40a8917c1df505", "8872": "3e9fbb1a08394026f68bb6e0bd8921287eccc272", "8911": "e3cca0b58a8d7eaf1ee98b4ef6be287112741bb7", "8941": "e7bdf2cdd4a0b0c8fd2a8642c239efb4386073cf", "9030": "7997bfe23acee896a864e53de74df34b4b0e2714", "9140": "1f7445489d2c928ce89a1708a6f515490f4747ac", "9153": "d00544a29193afb99747ad7297d0b7545b9c89b9", "9159": "34bfda1deaead3fed9070f3a766f7d842373c6d9", "9163": "0f69d91ca72342cb8750ec9cfde5687e9da76dba", "9166": "92cb09c80ce326e4825bc675ee453624a7f81aa7", "9178": "178a1f315415fad7f1565acf3c024d9b1d3202cf", "9196": "adb673a900dbd3b1415176582844f7e8fac9de5d", "9217": "e2a40071e2c928bfe1bc0ea2773589565794b1a6", "9218": "95ed74dad477bb29317ca082e9334e5b42bd6719", "9229": "bbe27bb3c4119a46b103d28954163e2d8991c3b5", "9258": "4f8392dca28f1c1a25def284680bd7e8939aed63", "9283": "ad73a2740fa1f676f4ccdfd7e97c29b088f02692", "9294": "b3f130bb3614cbdc00344a9ed5fb3336b49fe065", "9306": "2bb4d5672700871970644d0ac25b8d0045108db1", "9313": "29f28d4f2d46587fc401b6864fcd3bb6e294eac8", "9327": "86f704d82a140a31ef17cf75c30ed12e6a43bf56", "9343": "22bfb4fab7155706ac0b93f70d41dec201eb0c86", "9359": "8251fed3ff5ff1bbc777f5d9f4d3aff4cb259d76", "9363": "9a46a10e0b2cee3da4fae5bc940973c88ceeedf1", "9388": "31bd7351b0f54e32c7adc20e5d3dde4a4107d350", "9390": "c49e8e3c90d4b7a954695e85c603339aacf53e96", "9432": "82e91cb0679752d856698f686c50f243c9fe7a26", "9434": "ea2fcfc186a45b67a942e9af4c98f6bd4922a025", "9438": "9451c3fd89e8d2e89436b27e4c82fdcbdaa4836c", "9442": "fd1fc47ed54a1c9d8b26d09ff00e85b43672cec6", "9497": "c1cf542fdfe44ef97c765deb4dbaca41a05f4d42", "9504": "ca236e5cd87855ac14a1bd33bb56fcac3949a9cf", "9556": "c4adcaaa5662d2527e5949789736bb48f0ecc34c", "9559": "2fbe8ed7dc3db2b46edc8112ad92407be0ff2bfc", "9567": "0fa6c12e535053bbb0de04172819048e6e7984ee", "9569": "cb699d27120b8360c4dc9dac3cb4593676dab7db", "9578": "e4aa15ffb111d64d8a4615f526ae6147268746ad", "9588": "8238486e6b3888aa10821a5c39f41cd762d3bd14", "9605": "b28b9212e3dbbb1fe6ce545fd34e1549c83206e9", "9612": "3128d2748b145196ad5beb043b4eeb8604cddd45", "9619": "fbab112b8237e056386632d593875369ee794c6d", "9665": "1958e1da1f9db4c2850a13ecdc954dba4ac512c3", "9717": "0b76c841beb74d7fc16b0ae4e08b61c8b655df2f"}, "revision_to_date": {"327": 1290647504000, "493": 1429732381000, "536": 1430251162000, "637": 1431642261000, "682": 1436841550000, "793": 1454953711000, "910": 1466209240000, "1049": 1476220957000, "1089": 1478293805000, "1130": 1479485135000, "1331": 1483837378000, "1567": 1491277186000, "1590": 1492799080000, "1882": 1505496880000, "2022": 1509724629000, "2174": 1515091831000, "2513": 1526585670000, "2635": 1535393819000, "2644": 1535408456000, "2686": 1538238761000, "2775": 1546740725000, "2957": 1557951012000, "3227": 1569851965000, "3269": 1571350796000, "3432": 1578279372000, "3534": 1579011679000, "3618": 1587169421000, "3880": 1596700572000, "4161": 1602221744000, "4466": 1608612372000, "4835": 1619650767000, "5363": 1628528526000, "6037": 1642802071000, "6269": 1649274046000, "6599": 1656646791000, "7259": 1671832867000, "7427": 1678732726000, "7692": 1684280185000, "7794": 1688691406000, "8497": 1703744858000, "8526": 1704403423000, "8527": 1704403894000, "8538": 1704907218000, "8549": 1705104764000, "8599": 1707858385000, "8612": 1707944418000, "8645": 1708552520000, "8647": 1708554183000, "8665": 1709158990000, "8677": 1709765867000, "8699": 1710361580000, "8704": 1710444021000, "8724": 1711046879000, "8728": 1711057528000, "8734": 1711144978000, "8747": 1712075129000, "8872": 1715374854000, "8911": 1716646561000, "8941": 1716942856000, "9030": 1720546095000, "9140": 1723843138000, "9153": 1724363894000, "9159": 1724684367000, "9163": 1724794822000, "9166": 1724877949000, "9178": 1724886189000, "9196": 1725039470000, "9217": 1725566137000, "9218": 1725566243000, "9229": 1725911249000, "9258": 1727904228000, "9283": 1729103093000, "9294": 1729542769000, "9306": 1730148420000, "9313": 1730415369000, "9327": 1730917839000, "9343": 1731372767000, "9359": 1732203262000, "9363": 1732310761000, "9388": 1733855270000, "9390": 1733857214000, "9432": 1736202215000, "9434": 1736203408000, "9438": 1736205962000, "9442": 1736457649000, "9497": 1738953630000, "9504": 1739401390000, "9556": 1743616269000, "9559": 1743716913000, "9567": 1744220391000, "9569": 1744309507000, "9578": 1745267416000, "9588": 1745857327000, "9605": 1745961194000, "9612": 1746040064000, "9619": 1739555552000, "9665": 1747755745000, "9717": 1748454544000}, "params": {"arch": ["AMD64", "x86_64"], "cpu": ["13th Gen Intel(R) Core(TM) i7-1360P", "AMD EPYC 7763 64-Core Processor"], "machine": ["Jaye_Dell", "fv-az1368-243"], "num_cpu": ["16", "4"], "os": ["Linux 6.11.0-1015-azure", "Windows 11"], "ram": ["16379560", "32GB"], "python": ["3.12"], "matplotlib": [""], "numpy": [""], "pandas": [""], "pint": [""], "pooch": [""], "pyproj": [""], "scipy": [""], "traitlets": [""], "xarray": [""], "netcdf4": [""], "branch": ["HEAD"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1368-243", "num_cpu": "4", "os": "Linux 6.11.0-1015-azure", "ram": "16379560", "python": "3.12", "matplotlib": "", "numpy": "", "pandas": "", "pint": "", "pooch": "", "pyproj": "", "scipy": "", "traitlets": "", "xarray": "", "netcdf4": "", "branch": "HEAD"}], "benchmarks": {"apparent_temp_benchmarks.TimeSuite.time_apparent_temperature": {"code": "class TimeSuite:\n    def time_apparent_temperature(self, pressureSlice):\n        \"\"\"Benchmarking calculating apparent temperature on a 2d grid\"\"\"\n        mpcalc.apparent_temperature(self.pressureSlice.temperature, self.pressureSlice.relative_humidity,\n                                    self.pressureSlice.windspeed);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "apparent_temp_benchmarks.TimeSuite.time_apparent_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "apparent_temp_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "apparent_temp_benchmarks.TimeSuite.time_heat_index": {"code": "class TimeSuite:\n    def time_heat_index(self, timeSlice):\n        \"\"\"Benchmarking calculating heat index on a 3d cube\"\"\"\n        mpcalc.heat_index(self.timeSlice.temperature, self.timeSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "apparent_temp_benchmarks.TimeSuite.time_heat_index", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "apparent_temp_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "apparent_temp_benchmarks.TimeSuite.time_windchill": {"code": "class TimeSuite:\n    def time_windchill(self, timeSlice):\n        \"\"\"Benchmarking calculating windchill on a 3d cube\"\"\"\n        mpcalc.windchill(self.timeSlice.temperature, self.timeSlice.windspeed)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "apparent_temp_benchmarks.TimeSuite.time_windchill", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "apparent_temp_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.10", "warmup_time": -1}, "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency": {"code": "class TimeSuite:\n    def time_brunt_vaisala_frequency(self, timeSlice):\n        \"\"\"Benchmark Brunt Vaisala frequency calculation on a cube\"\"\"\n        mpcalc.brunt_vaisala_frequency(self.timeSlice.height, self.timeSlice.theta);\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "bound_layer_turbulence_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.06", "warmup_time": -1}, "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_period": {"code": "class TimeSuite:\n    def time_brunt_vaisala_period(self, timeSlice):\n        \"\"\"Benchmark Brunt Vaisala frequency calculation on a cube\"\"\"\n        mpcalc.brunt_vaisala_period(self.timeSlice.height, self.timeSlice.theta);\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_period", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "bound_layer_turbulence_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.06", "warmup_time": -1}, "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number": {"code": "class TimeSuite:\n    def time_gradient_richardson_number(self, timeSlice):\n        \"\"\"Benchmark Gradient Richardson Number on a cube\"\"\"\n        mpcalc.gradient_richardson_number(self.timeSlice.height, self.timeSlice.theta,\n                                         self.timeSlice.uwind, self.timeSlice.vwind)\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "bound_layer_turbulence_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.06", "warmup_time": -1}, "bound_layer_turbulence_benchmarks.TimeSuite.time_tke": {"code": "class TimeSuite:\n    def time_tke(self, ds):\n        \"\"\"Benchmarking turbulent kinetic energy calculation on a cube\"\"\"\n        mpcalc.tke(ds.uwind.values * units('m/s'), ds.vwind.values* units('m/s'), ds.wwind.values * units('m/s'))\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_tke", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "bound_layer_turbulence_benchmarks:13", "type": "time", "unit": "seconds", "version": "2025.06.06", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_add_height_to_pressure": {"code": "class TimeSuite:\n    def time_add_height_to_pressure(self, timeSlice):\n        \"\"\"Benchmarking adding height to pressure on a 3d cube\"\"\"\n        mpcalc.add_height_to_pressure(self.timeSlice.pressure.values * units('hPa'),\n                                      self.timeSlice.height.values * units('km'));\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_add_height_to_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_add_pressure_to_height": {"code": "class TimeSuite:\n    def time_add_pressure_to_height(self, timeSlice):\n        \"\"\"Benchmarking adding pressure to height on a 3d cube\"\"\"\n        mpcalc.add_pressure_to_height(self.timeSlice.height, self.timeSlice.pressure)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_add_pressure_to_height", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_density": {"code": "class TimeSuite:\n    def time_density(self, pressureSlice):\n        \"\"\"Benchmarking density calculation on a 2d surface\"\"\"\n        mpcalc.density(self.pressureSlice.pressure, self.pressureSlice.temperature, self.pressureSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_density", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_dry_lapse": {"code": "class TimeSuite:\n    def time_dry_lapse(self, timeSlice):\n        \"\"\"Benchmarking the dry lapse calculation on a 3d cube\"\"\"\n        mpcalc.dry_lapse(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_dry_lapse", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_geopotential_to_height": {"code": "class TimeSuite:\n    def time_geopotential_to_height(self, timeSlice):\n        \"\"\"Benchmarking the geopotential to height calculation on a 3d cube\"\"\"\n        mpcalc.geopotential_to_height(self.timeSlice.geopotential);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_geopotential_to_height", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential": {"code": "class TimeSuite:\n    def time_height_to_geopotential(self, timeSlice):\n        \"\"\"Benchmarking the height to geopotenial calculation on a 3d cube\"\"\"\n        mpcalc.height_to_geopotential(self.timeSlice.height);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_potential_temperature": {"code": "class TimeSuite:\n    def time_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking the potential temperature calculation on a 3d cube\"\"\"\n        mpcalc.potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_potential_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_sigma_to_pressure": {"code": "class TimeSuite:\n    def time_sigma_to_pressure(self, timeSlice):\n        \"\"\"Benchmarking the sigma to pressure calculation on a 3d cube\"\"\"\n        mpcalc.sigma_to_pressure(self.timeSlice.sigma, self.timeSlice.pressure[0], self.timeSlice.pressure[49])\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_sigma_to_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_static_stability": {"code": "class TimeSuite:\n    def time_static_stability(self, timeSlice):\n        \"\"\"Benchmarking static stability calculation on a 3d cube\"\"\"\n        mpcalc.static_stability(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_static_stability", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_temperature_from_potential_temperature": {"code": "class TimeSuite:\n    def time_temperature_from_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking calculating temperature from potential temperature on a 3d cube\"\"\"\n        mpcalc.temperature_from_potential_temperature(self.timeSlice.pressure, self.timeSlice.theta);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_temperature_from_potential_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic": {"code": "class TimeSuite:\n    def time_thickness_hydrostatic(self, timeSlice):\n        \"\"\"Benchmarking hydrostatic thickness calculation on a 3d cube\"\"\"\n        mpcalc.thickness_hydrostatic(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dry_thermo_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.09", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_absolute_momentum": {"code": "class TimeSuite:\n    def time_absolute_momentum(self, cross):\n        \"\"\"Benchmarking absolute momentum calculation\"\"\"\n        mpcalc.absolute_momentum(self.cross.uwind, self.cross.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_absolute_momentum", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity": {"code": "class TimeSuite:\n    def time_absolute_vorticity(self, pressureSlice):\n        \"\"\"benchmarking absolute momentum calculation on a 2d surface\"\"\"\n        mpcalc.absolute_vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_advection": {"code": "class TimeSuite:\n    def time_advection(self, timeSlice):\n        \"\"\"Benchmarking the advection calculation of t on a 3d cube\"\"\"\n        mpcalc.advection(self.timeSlice.temperature, self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_advection", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind": {"code": "class TimeSuite:\n    def time_ageostrophic_wind(self, pressureSlice):\n        \"\"\"Benchmarking ageostrophic wind calculation on a 2d surface\"\"\"\n        mpcalc.ageostrophic_wind(self.pressureSlice.height, self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_curvature_vorticity": {"code": "class TimeSuite:\n    def time_curvature_vorticity(self, timeSlice):\n        \"\"\"Benchmarking the curvature vorticity calculation on a 3d cube\"\"\"\n        mpcalc.curvature_vorticity(self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_curvature_vorticity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_frontogenesis": {"code": "class TimeSuite:\n    def time_frontogenesis(self, pressureSlice):\n        \"\"\"Benchmarking the calculation of frontogenesis of a 2d field\"\"\"\n        mpcalc.frontogenesis(self.pressureSlice.theta, self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_frontogenesis", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_inertal_advective_wind": {"code": "class TimeSuite:\n    def time_inertal_advective_wind(self, timeSlice):\n        \"\"\"Benchmarking inertal advective wind calculation on a 3d cube\"\"\"\n        mpcalc.inertial_advective_wind(self.timeSlice.uwind, self.timeSlice.vwind,\n                                       self.timeSlice.uwind, self.timeSlice.vwind)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_inertal_advective_wind", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_montgomery_streamfunction": {"code": "class TimeSuite:\n    def time_montgomery_streamfunction(self, pressureSlice):\n        \"\"\"Benchmarking the montgomery streamfunction calculation on a 2d grid\"\"\"\n        mpcalc.montgomery_streamfunction(self.pressureSlice.height, self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_montgomery_streamfunction", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_baroclinic": {"code": "class TimeSuite:\n    def time_potential_vorticity_baroclinic(self, timeSlice):\n        \"\"\"Benchmarking potential vorticity baroclinic on a 3d cube\"\"\"\n        mpcalc.potential_vorticity_baroclinic(self.timeSlice.theta, self.timeSlice.pressure,\n                                              self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_baroclinic", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic": {"code": "class TimeSuite:\n    def time_potential_vorticity_barotropic(self, timeSlice):\n        \"\"\"Benchmarking the barotropic potential vorticity calculation on a cube\"\"\"\n        mpcalc.potential_vorticity_barotropic(self.timeSlice.height, self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_q_vector": {"code": "class TimeSuite:\n    def time_q_vector(self, pressureSlice):\n        \"\"\"Benchmarking q vector calculation on a 2d slice\"\"\"\n        mpcalc.q_vector(self.pressureSlice.uwind, self.pressureSlice.vwind,\n                        self.pressureSlice.temperature, self.pressureSlice.pressure);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_q_vector", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_shear_vorticity": {"code": "class TimeSuite:\n    def time_shear_vorticity(self, pressureSlice):\n        \"\"\"Benchmarking shear vorticity on a 2d slice\"\"\"\n        mpcalc.shear_vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_shear_vorticity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_total_deformation": {"code": "class TimeSuite:\n    def time_total_deformation(self, pressureSlice):\n        \"\"\"Benchmarking total deformation calculation on a 2d slice\"\"\"\n        mpcalc.total_deformation(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_total_deformation", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_vorticity": {"code": "class TimeSuite:\n    def time_vorticity(self, pressureSlice):\n        \"\"\"Benchmarking vorticity calculation on a 2d slice\"\"\"\n        mpcalc.vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_vorticity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_wind_components": {"code": "class TimeSuite:\n    def time_wind_components(self, timeSlice):\n        \"\"\"Benchmarking the wind components calculation on a 3d cube\"\"\"\n        mpcalc.wind_components(self.timeSlice.windspeed, self.timeSlice.winddir)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_wind_components", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "dyn_kin_benchmarks.TimeSuite.time_wind_direction": {"code": "class TimeSuite:\n    def time_wind_direction(self, timeSlice):\n        \"\"\"Benchmarking the wind direction calculation on a 3d cube\"\"\"\n        mpcalc.wind_direction(self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;", "min_run_count": 2, "name": "dyn_kin_benchmarks.TimeSuite.time_wind_direction", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "dyn_kin_benchmarks:14", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "math_fctn_benchmarks.TimeSuite.time_cross_section_components": {"code": "class TimeSuite:\n    def time_cross_section_components(self, cross):\n        \"\"\"Benchmarking the cross section components of a wind grid\"\"\"\n        mpcalc.cross_section_components(self.cross.uwind, self.cross.vwind)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;", "min_run_count": 2, "name": "math_fctn_benchmarks.TimeSuite.time_cross_section_components", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "math_fctn_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "math_fctn_benchmarks.TimeSuite.time_geospatial_gradient": {"code": "class TimeSuite:\n    def time_geospatial_gradient(self, pressureSlice):\n        \"\"\"Benchmarking calculating the geospatial gradient of temp on a 2d array\"\"\"\n        mpcalc.geospatial_gradient(self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;", "min_run_count": 2, "name": "math_fctn_benchmarks.TimeSuite.time_geospatial_gradient", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "math_fctn_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "math_fctn_benchmarks.TimeSuite.time_geospatial_laplacian": {"code": "class TimeSuite:\n    def time_geospatial_laplacian(self, pressureSlice):\n        \"\"\"Benchmarking calculating the geospatial laplacian of temp on a 2d array\"\"\"\n        mpcalc.geospatial_laplacian(self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;", "min_run_count": 2, "name": "math_fctn_benchmarks.TimeSuite.time_geospatial_laplacian", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "math_fctn_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "math_fctn_benchmarks.TimeSuite.time_gradient": {"code": "class TimeSuite:\n    def time_gradient(self, timeSlice):\n        \"\"\"Benchmarking calculating the gradient of temp on a 3d cube\"\"\"\n        mpcalc.gradient(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;", "min_run_count": 2, "name": "math_fctn_benchmarks.TimeSuite.time_gradient", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "math_fctn_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "math_fctn_benchmarks.TimeSuite.time_tangential_component": {"code": "class TimeSuite:\n    def time_tangential_component(self, cross):\n        \"\"\"Benchmarking calculation of the tangential component of wind on a slice\"\"\"\n        mpcalc.tangential_component(self.cross.uwind, self.cross.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;", "min_run_count": 2, "name": "math_fctn_benchmarks.TimeSuite.time_tangential_component", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "math_fctn_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "math_fctn_benchmarks.TimeSuite.time_vector_derivative": {"code": "class TimeSuite:\n    def time_vector_derivative(self, pressureSlice):\n        \"\"\"Benchmarking calculating the vector derivative of wind on a 2d slice\"\"\"\n        mpcalc.vector_derivative(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;", "min_run_count": 2, "name": "math_fctn_benchmarks.TimeSuite.time_vector_derivative", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "math_fctn_benchmarks:12", "type": "time", "unit": "seconds", "version": "2025.06.17", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_dewpoint": {"code": "class TimeSuite:\n    def time_dewpoint(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from vapor pressure on a 3d cube\"\"\"\n        mpcalc.dewpoint(self.timeSlice.vapor_pressure);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh": {"code": "class TimeSuite:\n    def time_dewpoint_from_rh(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from calculated on a 3d cube\"\"\"\n        mpcalc.dewpoint_from_relative_humidity(self.timeSlice.temperature, self.timeSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_specific_humidity": {"code": "class TimeSuite:\n    def time_dewpoint_from_specific_humidity(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from specific humidity calculation on a 3d cube\"\"\"\n        mpcalc.dewpoint_from_specific_humidity(self.timeSlice.pressure, self.timeSlice.temperature,\n                                               self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_specific_humidity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_moist_air_poisson_exponent": {"code": "class TimeSuite:\n    def time_moist_air_poisson_exponent(self, timeSlice):\n        \"\"\"Benchmarking moist air poisson exponent calculation on a cube\"\"\"\n        mpcalc.moist_air_poisson_exponent(self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_moist_air_poisson_exponent", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_moist_air_specific_heat_pressure": {"code": "class TimeSuite:\n    def time_moist_air_specific_heat_pressure(self, timeSlice):\n        \"\"\"Benchmarking moist air specific heat pressure calculation on a 3d cube\"\"\"\n        mpcalc.moist_air_specific_heat_pressure(self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_moist_air_specific_heat_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_moist_lapse": {"code": "class TimeSuite:\n    def time_moist_lapse(self, profileSlice):\n        \"\"\"Benchmarking the calculation for the moist lapse rate for one profile\"\"\"\n        mpcalc.moist_lapse(self.profileSlice.pressure.values * units('hPa'), self.profileSlice.temperature[0].values * units('K'));\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_moist_lapse", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_moist_static_energy": {"code": "class TimeSuite:\n    def time_moist_static_energy(self, timeSlice):\n        \"\"\"Benchmarking moist static energy calculation on a 3d cube\"\"\"\n        mpcalc.moist_static_energy(self.timeSlice.height, self.timeSlice.temperature, self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_moist_static_energy", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_precipitable_water": {"code": "class TimeSuite:\n    def time_precipitable_water(self, timeSlice):\n        \"\"\"Benchmarking precipitable water calculation for one column\"\"\"\n        mpcalc.precipitable_water(self.timeSlice.pressure, self.timeSlice.dewpoint[0][0]);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_precipitable_water", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_dewpoint": {"code": "class TimeSuite:\n    def time_relative_humidity_from_dewpoint(self, timeSlice):\n        \"\"\"Benchmarking relative humidity from dewpoint calculation on a 3d cube\"\"\"\n        mpcalc.relative_humidity_from_dewpoint(self.timeSlice.temperature, self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_dewpoint", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_specific_humidity": {"code": "class TimeSuite:\n    def time_relative_humidity_from_specific_humidity(self, timeSlice):\n        \"\"\"Benchmarking relative humidity from specific humidity calculation on a 3d cube\"\"\"\n        mpcalc.relative_humidity_from_specific_humidity(self.timeSlice.pressure, self.timeSlice.temperature,\n                                                        self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_specific_humidity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_wet_psychrometric": {"code": "class TimeSuite:\n    def time_relative_humidity_wet_psychrometric(self, timeSlice):\n        \"\"\"Benchmarking the relative humidity from psychometric calculation on a cube\"\"\"\n        mpcalc.relative_humidity_wet_psychrometric(self.timeSlice.pressure, self.timeSlice.temperature,\n                                                   self.timeSlice.wet_bulb_temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_wet_psychrometric", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio": {"code": "class TimeSuite:\n    def time_rh_from_mixing_ratio(self, timeSlice):\n        \"\"\"Benchmarking relative humidity from mixing ratio on a 3d cube\"\"\"\n        mpcalc.relative_humidity_from_mixing_ratio(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_saturation_equivalent_potential_temperature": {"code": "class TimeSuite:\n    def time_saturation_equivalent_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking saturation equivalent potential temperature on 3d cube\"\"\"\n        mpcalc.saturation_equivalent_potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_saturation_equivalent_potential_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_saturation_vapor_pressure": {"code": "class TimeSuite:\n    def time_saturation_vapor_pressure(self, timeSlice):\n        \"\"\"Benchmarking the saturation vapor pressure calculation for a 3d cube\"\"\"\n        mpcalc.saturation_vapor_pressure(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_saturation_vapor_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_scale_height": {"code": "class TimeSuite:\n    def time_scale_height(self, pressureSlice):\n        \"\"\"Benchmarking the calculation for the scale height of a layer for 2 surfaces\"\"\"\n        mpcalc.scale_height(self.upperSlice.temperature, self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_scale_height", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_specific_humidity_from_dewpoint": {"code": "class TimeSuite:\n    def time_specific_humidity_from_dewpoint(self, timeSlice):\n        \"\"\"Benchmarking specific humidity from dewpoint calculation on a 3d cube\"\"\"\n        mpcalc.specific_humidity_from_dewpoint(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_specific_humidity_from_dewpoint", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic_from_relative_humidity": {"code": "class TimeSuite:\n    def time_thickness_hydrostatic_from_relative_humidity(self, profileSlice):\n        \"\"\"Benchmarking thickness hydrostatic calculation from relative humidity on one profile\"\"\"\n        mpcalc.thickness_hydrostatic_from_relative_humidity(self.profileSlice.pressure, self.profileSlice.temperature,\n                                                            self.profileSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic_from_relative_humidity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_vertical_velocity": {"code": "class TimeSuite:\n    def time_vertical_velocity(self, timeSlice):\n        \"\"\"Benchmarking vertical velocity calculation on a 3d cube\"\"\"\n        mpcalc.vertical_velocity(self.timeSlice.omega, self.timeSlice.pressure, self.timeSlice.temperature,\n                                 self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_vertical_velocity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_vertical_velocity_pressure": {"code": "class TimeSuite:\n    def time_vertical_velocity_pressure(self, timeSlice):\n        \"\"\"Benchmarking vertical velocity wrt pressure calculation on a 3d cube\"\"\"\n        mpcalc.vertical_velocity_pressure(self.timeSlice.wwind, self.timeSlice.pressure, self.timeSlice.temperature,\n                                          self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_vertical_velocity_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_virtual_potential_temperature": {"code": "class TimeSuite:\n    def time_virtual_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking virtual potential temperature calculation on a 3d cube\"\"\"\n        mpcalc.virtual_potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature,\n                                             self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_potential_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature": {"code": "class TimeSuite:\n    def time_virtual_temperature(self, timeSlice):\n        \"\"\"Benchmark virtual temperature on a 3d cube.\"\"\"\n        mpcalc.virtual_temperature(self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_melting": {"code": "class TimeSuite:\n    def time_water_latent_heat_melting(self, timeSlice):\n        \"\"\"Benchmarking the melting latent heat calculation on a 3d cube\"\"\"\n        mpcalc.water_latent_heat_melting(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_melting", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_sublimation": {"code": "class TimeSuite:\n    def time_water_latent_heat_sublimation(self, timeSlice):\n        \"\"\"Benchmarking the sublimation latent heat calcultion on a 3d cube\"\"\"\n        mpcalc.water_latent_heat_sublimation(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_sublimation", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_vaporization": {"code": "class TimeSuite:\n    def time_water_latent_heat_vaporization(self, timeSlice):\n        \"\"\"Benchmarking the vaporization latent heat calculation on a 3d cube\"\"\"\n        mpcalc.water_latent_heat_vaporization(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_vaporization", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_potential_temperature": {"code": "class TimeSuite:\n    def time_wet_bulb_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking the wet bulb potential temperature calculation on a 3d cube\"\"\"\n        mpcalc.wet_bulb_potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature,\n                                              self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_potential_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature": {"code": "class TimeSuite:\n    def time_wet_bulb_temperature(self, pressureSlice):\n        \"\"\"Benchmarking wet bulb temperature calculation on on a slice\"\"\"\n        mpcalc.wet_bulb_temperature(self.pressureSlice.pressure, self.pressureSlice.temperature, self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "moist_thermo_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "other_benchmarks.TimeSuite.time_find_intersections": {"code": "class TimeSuite:\n    def time_find_intersections(self, lineSlice):\n        \"\"\"benchmarking finding intersections calculation\"\"\"\n        mpcalc.find_intersections(self.lineSlice.lon, self.lineSlice.temperature, self.lineSlice.dewpoint);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "other_benchmarks.TimeSuite.time_find_intersections", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "other_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "other_benchmarks.TimeSuite.time_find_peaks": {"code": "class TimeSuite:\n    def time_find_peaks(self, pressureSlice):\n        \"\"\"Benchmarking finding peaks of 2d dewpoint slice\"\"\"\n        mpcalc.find_peaks(self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "other_benchmarks.TimeSuite.time_find_peaks", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "other_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "other_benchmarks.TimeSuite.time_get_perturbation": {"code": "class TimeSuite:\n    def time_get_perturbation(self, ds):\n        \"\"\"Benchmarking getting the perturbation of a time series\"\"\"\n        mpcalc.get_perturbation(self.ds.temperature)\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "other_benchmarks.TimeSuite.time_get_perturbation", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "other_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "other_benchmarks.TimeSuite.time_isentropic_interpolation_as_dataset": {"code": "class TimeSuite:\n    def time_isentropic_interpolation_as_dataset(self, timeSlice):\n        \"\"\"Benchmarking the isentropic interpolation as dataset calculation on a 3d cube\"\"\"\n        mpcalc.isentropic_interpolation_as_dataset([265.] * units.kelvin, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "other_benchmarks.TimeSuite.time_isentropic_interpolation_as_dataset", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "other_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "other_benchmarks.TimeSuite.time_peak_persistence": {"code": "class TimeSuite:\n    def time_peak_persistence(self, pressureSlice):\n        \"\"\"Benchmarking calculating persistence of of maxima point in 3d\"\"\"\n        mpcalc.peak_persistence(self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "other_benchmarks.TimeSuite.time_peak_persistence", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "other_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "smoothing_benchmarks.TimeSuite.time_smooth_circular": {"code": "class TimeSuite:\n    def time_smooth_circular(self, pressureSlice):\n        \"\"\"Benchmarking the circular smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_circular(self.pressureSlice.relative_humidity, 2);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "smoothing_benchmarks.TimeSuite.time_smooth_circular", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "smoothing_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "smoothing_benchmarks.TimeSuite.time_smooth_gaussian": {"code": "class TimeSuite:\n    def time_smooth_gaussian(self, pressureSlice):\n        \"\"\"Benchmarking the gaussian smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_gaussian(self.pressureSlice.relative_humidity, 5);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "smoothing_benchmarks.TimeSuite.time_smooth_gaussian", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "smoothing_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "smoothing_benchmarks.TimeSuite.time_smooth_n_point": {"code": "class TimeSuite:\n    def time_smooth_n_point(self, pressureSlice):\n        \"\"\"Benchmarking the 5 point smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_n_point(self.pressureSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "smoothing_benchmarks.TimeSuite.time_smooth_n_point", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "smoothing_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "smoothing_benchmarks.TimeSuite.time_smooth_rectangular": {"code": "class TimeSuite:\n    def time_smooth_rectangular(self, pressureSlice):\n        \"\"\"Benchmarking the rectangular smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_rectangular(self.pressureSlice.relative_humidity, (3, 7));\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "smoothing_benchmarks.TimeSuite.time_smooth_rectangular", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "smoothing_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "smoothing_benchmarks.TimeSuite.time_smooth_window": {"code": "class TimeSuite:\n    def time_smooth_window(self, pressureSlice):\n        \"\"\"Benchmarking the window smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_window(self.pressureSlice.relative_humidity, np.diag(np.ones(5)))\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "smoothing_benchmarks.TimeSuite.time_smooth_window", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "smoothing_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "smoothing_benchmarks.TimeSuite.time_zoom_xarray": {"code": "class TimeSuite:\n    def time_zoom_xarray(self, pressureSlice):\n        \"\"\"Benchmarking the zoom xarray function\"\"\"\n        mpcalc.zoom_xarray(self.pressureSlice.temperature, zoom = 3.0);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "smoothing_benchmarks.TimeSuite.time_zoom_xarray", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "smoothing_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_bulk_shear": {"code": "class TimeSuite:\n    def time_bulk_shear(self, profileSlice):\n        \"\"\"Benchmarking calculating the bulk shear of a profile\"\"\"\n        mpcalc.bulk_shear(self.profileSlice.pressure, self.profileSlice.uwind, self.profileSlice.vwind);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_bulk_shear", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_bunkers_storm_motion": {"code": "class TimeSuite:\n    def time_bunkers_storm_motion(self, profileSlice):\n        \"\"\"Benchmarking bunkers storm motion on one profile\"\"\"\n        mpcalc.bunkers_storm_motion(self.profileSlice.pressure, self.profileSlice.uwind,\n                                    self.profileSlice.vwind, self.profileSlice.height)\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_bunkers_storm_motion", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_cape_cin": {"code": "class TimeSuite:\n    def time_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking cape_cin calculation for one profile\"\"\"\n        mpcalc.cape_cin(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint, self.parcelProfile);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_cape_cin", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_ccl": {"code": "class TimeSuite:\n    def time_ccl(self, profileSlice):\n        \"\"\"Benchmarking calculating the convective condensation level of a profile\"\"\"\n        mpcalc.ccl(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_ccl", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_corfidi_storm_motion": {"code": "class TimeSuite:\n    def time_corfidi_storm_motion(self, profileSlice):\n        \"\"\"Benchmarking corfidi storm motion on one profile\"\"\"\n        mpcalc.corfidi_storm_motion(self.profileSlice.pressure, self.profileSlice.uwind,\n                                    self.profileSlice.vwind);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_corfidi_storm_motion", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_critical_angle": {"code": "class TimeSuite:\n    def time_critical_angle(self, profileSlice):\n        \"\"\"Benchmarking critical angle on one profile\"\"\"\n        mpcalc.critical_angle(self.profileSlice.pressure, self.profileSlice.uwind,\n                              self.profileSlice.vwind, self.profileSlice.height,\n                              0 * units('m/s'), 0 * units('m/s'));\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_critical_angle", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_cross_totals": {"code": "class TimeSuite:\n    def time_cross_totals(self, timeSlice):\n        \"\"\"Benchmarking cross totals calculation on many profiles\"\"\"\n        mpcalc.cross_totals(self.timeSlice.pressure, self.timeSlice.temperature,\n                            self.timeSlice.dewpoint)\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_cross_totals", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_downdraft_cape": {"code": "class TimeSuite:\n    def time_downdraft_cape(self, profileSlice):\n        \"\"\"Benchmarking downdraft cape calculation on one profile\"\"\"\n        mpcalc.downdraft_cape(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_downdraft_cape", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_el": {"code": "class TimeSuite:\n    def time_el(self, profileSlice):\n        \"\"\"Benchmarks el calculation on one profile\"\"\"\n        mpcalc.el(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_el", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_galvez_davison_index": {"code": "class TimeSuite:\n    def time_galvez_davison_index(self, timeSlice):\n        \"\"\"Benchmarking calculating the galvez davison index on many profiles\"\"\"\n        mpcalc.galvez_davison_index(self.timeSlice.pressure, self.timeSlice.temperature,\n                                    self.timeSlice.mixing_ratio, self.timeSlice.pressure[0])\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_galvez_davison_index", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_k_index": {"code": "class TimeSuite:\n    def time_k_index(self, timeSlice):\n        \"\"\"Benchmarking k index calculation on many profiles\"\"\"\n        mpcalc.k_index(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_k_index", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_lcl": {"code": "class TimeSuite:\n    def time_lcl(self, timeSlice):\n        \"\"\"Benchmarks lcl on a 3d cube - many profiles\"\"\"\n        mpcalc.lcl(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_lcl", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_lifted_index": {"code": "class TimeSuite:\n    def time_lifted_index(self, profileSlice):\n        \"\"\"Benchmarking lifted index calculation on one profile\"\"\"\n        mpcalc.lifted_index(self.profileSlice.pressure, self.profileSlice.temperature,\n                            self.parcelProfile);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_lifted_index", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_mixed_layer_cape_cin": {"code": "class TimeSuite:\n    def time_mixed_layer_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking mixed layer cape cin calculation for one profile\"\"\"\n        mpcalc.mixed_layer_cape_cin(self.profileSlice.pressure, self.profileSlice.temperature,\n                                    self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_mixed_layer_cape_cin", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_most_unstable_cape_cin": {"code": "class TimeSuite:\n    def time_most_unstable_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking most unstable cape cin calculation on one profile\"\"\"\n        mpcalc.most_unstable_cape_cin(self.profileSlice.pressure, self.profileSlice.temperature,\n                                      self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_most_unstable_cape_cin", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_most_unstable_parcel": {"code": "class TimeSuite:\n    def time_most_unstable_parcel(self, profileSlice):\n        \"\"\"Benchmarking the calculation to find the most unstable parcel for one profile\"\"\"\n        mpcalc.most_unstable_parcel(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_most_unstable_parcel", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_parcel_profile": {"code": "class TimeSuite:\n    def time_parcel_profile(self, profileSlice):\n        \"\"\"Benchmarking the atmospheric parcel profile for one profile\"\"\"\n        mpcalc.parcel_profile(self.profileSlice.pressure, self.profileSlice.temperature[0], self.profileSlice.dewpoint[0]);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_parcel_profile", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_parcel_profile_with_lcl_as_dataset": {"code": "class TimeSuite:\n    def time_parcel_profile_with_lcl_as_dataset(self, profileSlice):\n        \"\"\"Benchmarking parcel profile with lcl as dataset one on profile\"\"\"\n        mpcalc.parcel_profile_with_lcl_as_dataset(self.profileSlice.pressure, self.profileSlice.temperature,\n                                                  self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_parcel_profile_with_lcl_as_dataset", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_showalter_index": {"code": "class TimeSuite:\n    def time_showalter_index(self, profileSlice):\n        \"\"\"Benchmarking calculating the showalter index on one profiles\"\"\"\n        mpcalc.showalter_index(self.profileSlice.pressure, self.profileSlice.temperature,\n                               self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_showalter_index", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_significant_tornado": {"code": "class TimeSuite:\n    def time_significant_tornado(self, profileSlice):\n        \"\"\"Benchmarking significant tornado param for one profile\"\"\"\n        mpcalc.significant_tornado(self.sbcape, self.sblclheight, self.relhel, self.shear);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_significant_tornado", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_storm_relative_helicity": {"code": "class TimeSuite:\n    def time_storm_relative_helicity(self, profileSlice):\n        \"\"\"Benchmarks storm relative helicity over one profile\"\"\"\n        mpcalc.storm_relative_helicity(self.profileSlice.height, self.profileSlice.uwind,\n                                       self.profileSlice.vwind, 1 * units('km'))\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_storm_relative_helicity", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_supercell_composite": {"code": "class TimeSuite:\n    def time_supercell_composite(self, profileSlice):\n        \"\"\"Benchmarks supercell composite calculation for one calculation\"\"\"\n        mpcalc.supercell_composite(2500 * units('J/kg'), 125 * units('m^2/s^2'), 50 * units.knot)\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_supercell_composite", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_surface_based_cape_cin": {"code": "class TimeSuite:\n    def time_surface_based_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking surface based cape cin calculation on one profile\"\"\"\n        mpcalc.surface_based_cape_cin(self.profileSlice.pressure, self.profileSlice.temperature,\n                                      self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_surface_based_cape_cin", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_sweat_index": {"code": "class TimeSuite:\n    def time_sweat_index(self, timeSlice):\n        \"\"\"Benchmarking SWEAT index on many profiles\"\"\"\n        mpcalc.sweat_index(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.dewpoint,\n                           self.timeSlice.windspeed, self.timeSlice.winddir);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_sweat_index", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "soundings_benchmarks.TimeSuite.time_vertical_totals": {"code": "class TimeSuite:\n    def time_vertical_totals(self, timeSlice):\n        \"\"\"Benchmarking vertical totals for many profiles\"\"\"\n        mpcalc.vertical_totals(self.timeSlice.pressure, self.timeSlice.temperature);\n        mpcalc.storm_relative_helicity(self.profileSlice.height, self.profileSlice.uwind, self.profileSlice.vwind, depth = 1 * units('km'))\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "soundings_benchmarks.TimeSuite.time_vertical_totals", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "soundings_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.16", "warmup_time": -1}, "std_atm_benchmarks.TimeSuite.time_altimeter_to_sea_level_pressure": {"code": "class TimeSuite:\n    def time_altimeter_to_sea_level_pressure(self, timeSlice):\n        \"\"\"Benchmarking altimeter to slp on a 3d cube\"\"\"\n        mpcalc.altimeter_to_sea_level_pressure(self.timeSlice.pressure.values * units('hPa'), self.timeSlice.height.values * units('km'),\n                                               self.timeSlice.temperature * units('K'));\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "std_atm_benchmarks.TimeSuite.time_altimeter_to_sea_level_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "std_atm_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "std_atm_benchmarks.TimeSuite.time_height_to_pressure_std": {"code": "class TimeSuite:\n    def time_height_to_pressure_std(self, timeSlice):\n        \"\"\"Benchmarking the height to pressure calculation in a standard atmosphere on a 3d cube\"\"\"\n        mpcalc.height_to_pressure_std(self.timeSlice.height)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "std_atm_benchmarks.TimeSuite.time_height_to_pressure_std", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "std_atm_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}, "std_atm_benchmarks.TimeSuite.time_pressure_to_height_std": {"code": "class TimeSuite:\n    def time_pressure_to_height_std(self, timeSlice):\n        \"\"\"Benchmarking the pressure to height calculation in a standard atmosphere on a 3d cube\"\"\"\n        mpcalc.pressure_to_height_std(self.timeSlice.pressure)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;", "min_run_count": 2, "name": "std_atm_benchmarks.TimeSuite.time_pressure_to_height_std", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "std_atm_benchmarks:11", "type": "time", "unit": "seconds", "version": "2025.06.11", "warmup_time": -1}}, "machines": {"Jaye_Dell": {"arch": "AMD64", "cpu": "13th Gen Intel(R) Core(TM) i7-1360P", "machine": "Jaye_Dell", "num_cpu": "16", "os": "Windows 11", "ram": "32GB", "version": 1}, "fv-az1368-243": {"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1368-243", "num_cpu": "4", "os": "Linux 6.11.0-1015-azure", "ram": "16379560", "version": 1}}, "tags": {"v0.10.0": 2775, "v0.10.2": 2957, "v0.11.0": 3227, "v0.11.1": 3269, "v0.12.0": 3432, "v0.12.1": 3618, "v0.12.2": 3880, "v0.2.1": 682, "v0.3.0": 793, "v0.3.1": 910, "v0.4.0": 1049, "v0.4.1": 1089, "v0.4.2": 1130, "v0.4.3": 1331, "v0.5.0": 1567, "v0.5.1": 1590, "v0.6.0": 1882, "v0.6.1": 2022, "v0.7.0": 2174, "v0.8.0": 2513, "v0.9.0": 2635, "v0.9.1": 2644, "v0.9.2": 2686, "v1.0": 4466, "v1.0.0": 4466, "v1.0.0rc1": 3534, "v1.0.0rc2": 4161, "v1.0.1": 4835, "v1.1.0": 5363, "v1.2.0": 6037, "v1.3.0": 6269, "v1.3.1": 6599, "v1.4.0": 7259, "v1.4.1": 7427, "v1.5.0": 7692, "v1.5.1": 7794, "v1.6.0": 8497, "v1.6.1": 8538, "v1.6.2": 8747, "v1.6.3": 9159, "v1.7.0": 9619, "theAttic": 327, "v0.1.0": 493, "v0.1.1": 536, "v0.2.0": 637}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}