{
    "apparent_temp_benchmarks.TimeSuite.time_apparent_temperature": {
        "code": "class TimeSuite:\n    def time_apparent_temperature(self, pressureSlice):\n        \"\"\"Benchmarking calculating apparent temperature on a 2d grid\"\"\"\n        mpcalc.apparent_temperature(self.pressureSlice.temperature, self.pressureSlice.relative_humidity,\n                                    self.pressureSlice.windspeed);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "apparent_temp_benchmarks.TimeSuite.time_apparent_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "apparent_temp_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "apparent_temp_benchmarks.TimeSuite.time_heat_index": {
        "code": "class TimeSuite:\n    def time_heat_index(self, timeSlice):\n        \"\"\"Benchmarking calculating heat index on a 3d cube\"\"\"\n        mpcalc.heat_index(self.timeSlice.temperature, self.timeSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "apparent_temp_benchmarks.TimeSuite.time_heat_index",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "apparent_temp_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "apparent_temp_benchmarks.TimeSuite.time_windchill": {
        "code": "class TimeSuite:\n    def time_windchill(self, timeSlice):\n        \"\"\"Benchmarking calculating windchill on a 3d cube\"\"\"\n        mpcalc.windchill(self.timeSlice.temperature, self.timeSlice.windspeed)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "apparent_temp_benchmarks.TimeSuite.time_windchill",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "apparent_temp_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency": {
        "code": "class TimeSuite:\n    def time_brunt_vaisala_frequency(self, timeSlice):\n        \"\"\"Benchmark Brunt Vaisala frequency calculation - on a grid\"\"\"\n        mpcalc.brunt_vaisala_frequency(self.timeSlice.height, self.timeSlice.theta);\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "bound_layer_turbulence_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.06",
        "warmup_time": -1
    },
    "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number": {
        "code": "class TimeSuite:\n    def time_gradient_richardson_number(self, timeSlice):\n        \"\"\"Benchmark Gradient Richardson Number on a grid\"\"\"\n        mpcalc.gradient_richardson_number(self.timeSlice.height, self.timeSlice.theta,\n                                         self.timeSlice.uwind, self.timeSlice.vwind)\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "bound_layer_turbulence_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.06",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_density": {
        "code": "class TimeSuite:\n    def time_density(self, pressureSlice):\n        \"\"\"Benchmarking density calculation on a 2d surface\"\"\"\n        mpcalc.density(self.pressureSlice.pressure, self.pressureSlice.temperature, self.pressureSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_density",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_dry_lapse": {
        "code": "class TimeSuite:\n    def time_dry_lapse(self, timeSlice):\n        \"\"\"Benchmarking the dry lapse calculation on a 3d cube\"\"\"\n        mpcalc.dry_lapse(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_dry_lapse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential": {
        "code": "class TimeSuite:\n    def time_height_to_geopotential(self, timeSlice):\n        \"\"\"Benchmarking the height to geopotenial calculation on a 3d cube\"\"\"\n        mpcalc.height_to_geopotential(self.timeSlice.height);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_potential_temperature": {
        "code": "class TimeSuite:\n    def time_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking the potential temperature calculation on a 3d cube\"\"\"\n        mpcalc.potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_potential_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_static_stability": {
        "code": "class TimeSuite:\n    def time_static_stability(self, timeSlice):\n        \"\"\"Benchmarking static stability calculation on a 3d cube\"\"\"\n        mpcalc.static_stability(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_static_stability",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic": {
        "code": "class TimeSuite:\n    def time_thickness_hydrostatic(self, timeSlice):\n        \"\"\"Benchmarking hydrostatic thickness calculation on a 3d cube\"\"\"\n        mpcalc.thickness_hydrostatic(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity": {
        "code": "class TimeSuite:\n    def time_absolute_vorticity(self, pressureSlice):\n        \"\"\"benchmarking absolute momentum calculation on a 2d surface\"\"\"\n        mpcalc.absolute_vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_advection": {
        "code": "class TimeSuite:\n    def time_advection(self, timeSlice):\n        \"\"\"Benchmarking the advection calculation of t on a 3d cube\"\"\"\n        mpcalc.advection(self.timeSlice.temperature, self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_advection",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind": {
        "code": "class TimeSuite:\n    def time_ageostrophic_wind(self, pressureSlice):\n        \"\"\"Benchmarking ageostrophic wind calculation on a 2d surface\"\"\"\n        mpcalc.ageostrophic_wind(self.pressureSlice.height, self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_frontogenesis": {
        "code": "class TimeSuite:\n    def time_frontogenesis(self, pressureSlice):\n        \"\"\"Benchmarking the calculation of frontogenesis of a 2d field\"\"\"\n        mpcalc.frontogenesis(self.pressureSlice.theta, self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_frontogenesis",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic": {
        "code": "class TimeSuite:\n    def time_potential_vorticity_barotropic(self, timeSlice):\n        \"\"\"Benchmarking the barotropic potential vorticity calculation on a cube\"\"\"\n        mpcalc.potential_vorticity_barotropic(self.timeSlice.height, self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_q_vector": {
        "code": "class TimeSuite:\n    def time_q_vector(self, pressureSlice):\n        \"\"\"Benchmarking q vector calculation on a 2d slice\"\"\"\n        mpcalc.q_vector(self.pressureSlice.uwind, self.pressureSlice.vwind,\n                        self.pressureSlice.temperature, self.pressureSlice.pressure);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_q_vector",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_total_deformation": {
        "code": "class TimeSuite:\n    def time_total_deformation(self, pressureSlice):\n        \"\"\"Benchmarking total deformation calculation on a 2d slice\"\"\"\n        mpcalc.total_deformation(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_total_deformation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_vorticity": {
        "code": "class TimeSuite:\n    def time_vorticity(self, pressureSlice):\n        \"\"\"Benchmarking vorticity calculation on a 2d slice\"\"\"\n        mpcalc.vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_vorticity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_geospatial_gradient": {
        "code": "class TimeSuite:\n    def time_geospatial_gradient(self, pressureSlice):\n        \"\"\"Benchmarking calculating the geospatial gradient of temp on a 2d array\"\"\"\n        mpcalc.geospatial_gradient(self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_geospatial_gradient",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_geospatial_laplacian": {
        "code": "class TimeSuite:\n    def time_geospatial_laplacian(self, pressureSlice):\n        \"\"\"Benchmarking calculating the geospatial laplacian of temp on a 2d array\"\"\"\n        mpcalc.geospatial_laplacian(self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_geospatial_laplacian",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_gradient": {
        "code": "class TimeSuite:\n    def time_gradient(self, timeSlice):\n        \"\"\"Benchmarking calculating the gradient of temp on a 3d cube\"\"\"\n        mpcalc.gradient(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_gradient",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_vector_derivative": {
        "code": "class TimeSuite:\n    def time_vector_derivative(self, pressureSlice):\n        \"\"\"Benchmarking calculating the vector derivative of wind on a 2d slice\"\"\"\n        mpcalc.vector_derivative(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_vector_derivative",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_dewpoint": {
        "code": "class TimeSuite:\n    def time_dewpoint(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from vapor pressure on a 3d cube\"\"\"\n        mpcalc.dewpoint(self.timeSlice.vapor_pressure);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh": {
        "code": "class TimeSuite:\n    def time_dewpoint_from_rh(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from calculated on a 3d cube\"\"\"\n        mpcalc.dewpoint_from_relative_humidity(self.timeSlice.temperature, self.timeSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_precipitable_water": {
        "code": "class TimeSuite:\n    def time_precipitable_water(self, timeSlice):\n        \"\"\"Benchmarking precipitable water calculation for one column\"\"\"\n        mpcalc.precipitable_water(self.timeSlice.pressure, self.timeSlice.dewpoint[0][0]);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_precipitable_water",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio": {
        "code": "class TimeSuite:\n    def time_rh_from_mixing_ratio(self, timeSlice):\n        \"\"\"Benchmarking relative humidity from mixing ratio on a 3d cube\"\"\"\n        mpcalc.relative_humidity_from_mixing_ratio(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_saturation_vapor_pressure": {
        "code": "class TimeSuite:\n    def time_saturation_vapor_pressure(self, timeSlice):\n        \"\"\"Benchmarking the saturation vapor pressure calculation for a 3d cube\"\"\"\n        mpcalc.saturation_vapor_pressure(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_saturation_vapor_pressure",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_scale_height": {
        "code": "class TimeSuite:\n    def time_scale_height(self, pressureSlice):\n        \"\"\"Benchmarking the calculation for the scale height of a layer for 2 surfaces\"\"\"\n        mpcalc.scale_height(self.upperSlice.temperature, self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_scale_height",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature": {
        "code": "class TimeSuite:\n    def time_virtual_temperature(self, timeSlice):\n        \"\"\"Benchmark virtual temperature on a 3d cube.\"\"\"\n        mpcalc.virtual_temperature(self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature": {
        "code": "class TimeSuite:\n    def time_wet_bulb_temperature(self, pressureSlice):\n        \"\"\"Benchmarking wet bulb temperature calculation on on a cube\"\"\"\n        mpcalc.wet_bulb_temperature(self.pressureSlice.pressure, self.pressureSlice.temperature, self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_find_intersections": {
        "code": "class TimeSuite:\n    def time_find_intersections(self, lineSlice):\n        \"\"\"benchmarking finding intersections calculation\"\"\"\n        mpcalc.find_intersections(self.lineSlice.lon, self.lineSlice.temperature, self.lineSlice.dewpoint);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_find_intersections",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_find_peaks": {
        "code": "class TimeSuite:\n    def time_find_peaks(self, pressureSlice):\n        \"\"\"Benchmarking finding peaks of 2d dewpoint slice\"\"\"\n        mpcalc.find_peaks(self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_find_peaks",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_get_perturbation": {
        "code": "class TimeSuite:\n    def time_get_perturbation(self, ds):\n        \"\"\"Benchmarking getting the perturbation of a time series\"\"\"\n        mpcalc.get_perturbation(self.ds.temperature)\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_get_perturbation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_peak_persistence": {
        "code": "class TimeSuite:\n    def time_peak_persistence(self, pressureSlice):\n        \"\"\"Benchmarking calculating persistence of of maxima point in 3d\"\"\"\n        mpcalc.peak_persistence(self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_peak_persistence",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_circular": {
        "code": "class TimeSuite:\n    def time_smooth_circular(self, pressureSlice):\n        \"\"\"Benchmarking the circular smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_circular(self.pressureSlice.relative_humidity, 2);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_circular",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_gaussian": {
        "code": "class TimeSuite:\n    def time_smooth_gaussian(self, pressureSlice):\n        \"\"\"Benchmarking the gaussian smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_gaussian(self.pressureSlice.relative_humidity, 5);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_gaussian",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_n_point": {
        "code": "class TimeSuite:\n    def time_smooth_n_point(self, pressureSlice):\n        \"\"\"Benchmarking the 5 point smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_n_point(self.pressureSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_n_point",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_rectangular": {
        "code": "class TimeSuite:\n    def time_smooth_rectangular(self, pressureSlice):\n        \"\"\"Benchmarking the rectangular smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_rectangular(self.pressureSlice.relative_humidity, (3, 7));\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_rectangular",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_window": {
        "code": "class TimeSuite:\n    def time_smooth_window(self, pressureSlice):\n        \"\"\"Benchmarking the window smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_window(self.pressureSlice.relative_humidity, np.diag(np.ones(5)))\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_window",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_bulk_shear": {
        "code": "class TimeSuite:\n    def time_bulk_shear(self, profileSlice):\n        \"\"\"Benchmarking calculating the bulk shear of a profile\"\"\"\n        mpcalc.bulk_shear(self.profileSlice.pressure, self.profileSlice.uwind, self.profileSlice.vwind);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_bulk_shear",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:10",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_cape_cin": {
        "code": "class TimeSuite:\n    def time_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking cape_cin calculation for one profile\"\"\"\n        mpcalc.cape_cin(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint, self.parcelProfile);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_cape_cin",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:10",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_ccl": {
        "code": "class TimeSuite:\n    def time_ccl(self, profileSlice):\n        \"\"\"Benchmarking calculating the convective condensation level of a profile\"\"\"\n        mpcalc.ccl(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_ccl",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:10",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_el": {
        "code": "class TimeSuite:\n    def time_el(self, profileSlice):\n        \"\"\"Benchmarks el calculation on one profile\"\"\"\n        mpcalc.el(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_el",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:10",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_lcl": {
        "code": "class TimeSuite:\n    def time_lcl(self, timeSlice):\n        \"\"\"Benchmarks lcl on a 3d cube - many profiles\"\"\"\n        mpcalc.lcl(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_lcl",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:10",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_most_unstable_parcel": {
        "code": "class TimeSuite:\n    def time_most_unstable_parcel(self, profileSlice):\n        \"\"\"Benchmarking the calculation to find the most unstable parcel for one profile\"\"\"\n        mpcalc.most_unstable_parcel(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_most_unstable_parcel",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:10",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_parcel_profile": {
        "code": "class TimeSuite:\n    def time_parcel_profile(self, profileSlice):\n        \"\"\"Benchmarking the atmospheric parcel profile for one profile\"\"\"\n        mpcalc.parcel_profile(self.profileSlice.pressure, self.profileSlice.temperature[0], self.profileSlice.dewpoint[0]);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_parcel_profile",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:10",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "std_atm_benchmarks.TimeSuite.time_height_to_pressure_std": {
        "code": "class TimeSuite:\n    def time_height_to_pressure_std(self, timeSlice):\n        \"\"\"Benchmarking the height to pressure calculation in a standard atmosphere on a 3d cube\"\"\"\n        mpcalc.height_to_pressure_std(self.timeSlice.height)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "std_atm_benchmarks.TimeSuite.time_height_to_pressure_std",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "std_atm_benchmarks:10",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "std_atm_benchmarks.TimeSuite.time_pressure_to_height_std": {
        "code": "class TimeSuite:\n    def time_pressure_to_height_std(self, timeSlice):\n        \"\"\"Benchmarking the pressure to height calculation in a standard atmosphere on a 3d cube\"\"\"\n        mpcalc.pressure_to_height_std(self.timeSlice.pressure)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "std_atm_benchmarks.TimeSuite.time_pressure_to_height_std",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "std_atm_benchmarks:10",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "version": 2
}