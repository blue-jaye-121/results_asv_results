{
    "apparent_temp_benchmarks.TimeSuite.time_apparent_temperature": {
        "code": "class TimeSuite:\n    def time_apparent_temperature(self, pressureSlice):\n        \"\"\"Benchmarking calculating apparent temperature on a 2d grid\"\"\"\n        mpcalc.apparent_temperature(self.pressureSlice.temperature, self.pressureSlice.relative_humidity,\n                                    self.pressureSlice.windspeed);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "apparent_temp_benchmarks.TimeSuite.time_apparent_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "apparent_temp_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "apparent_temp_benchmarks.TimeSuite.time_heat_index": {
        "code": "class TimeSuite:\n    def time_heat_index(self, timeSlice):\n        \"\"\"Benchmarking calculating heat index on a 3d cube\"\"\"\n        mpcalc.heat_index(self.timeSlice.temperature, self.timeSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "apparent_temp_benchmarks.TimeSuite.time_heat_index",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "apparent_temp_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "apparent_temp_benchmarks.TimeSuite.time_windchill": {
        "code": "class TimeSuite:\n    def time_windchill(self, timeSlice):\n        \"\"\"Benchmarking calculating windchill on a 3d cube\"\"\"\n        mpcalc.windchill(self.timeSlice.temperature, self.timeSlice.windspeed)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "apparent_temp_benchmarks.TimeSuite.time_windchill",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "apparent_temp_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.10",
        "warmup_time": -1
    },
    "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency": {
        "code": "class TimeSuite:\n    def time_brunt_vaisala_frequency(self, timeSlice):\n        \"\"\"Benchmark Brunt Vaisala frequency calculation on a cube\"\"\"\n        mpcalc.brunt_vaisala_frequency(self.timeSlice.height, self.timeSlice.theta);\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_frequency",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "bound_layer_turbulence_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.06",
        "warmup_time": -1
    },
    "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_period": {
        "code": "class TimeSuite:\n    def time_brunt_vaisala_period(self, timeSlice):\n        \"\"\"Benchmark Brunt Vaisala frequency calculation on a cube\"\"\"\n        mpcalc.brunt_vaisala_period(self.timeSlice.height, self.timeSlice.theta);\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_brunt_vaisala_period",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "bound_layer_turbulence_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.06",
        "warmup_time": -1
    },
    "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number": {
        "code": "class TimeSuite:\n    def time_gradient_richardson_number(self, timeSlice):\n        \"\"\"Benchmark Gradient Richardson Number on a cube\"\"\"\n        mpcalc.gradient_richardson_number(self.timeSlice.height, self.timeSlice.theta,\n                                         self.timeSlice.uwind, self.timeSlice.vwind)\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_gradient_richardson_number",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "bound_layer_turbulence_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.06",
        "warmup_time": -1
    },
    "bound_layer_turbulence_benchmarks.TimeSuite.time_tke": {
        "code": "class TimeSuite:\n    def time_tke(self, ds):\n        \"\"\"Benchmarking turbulent kinetic energy calculation on a cube\"\"\"\n        mpcalc.tke(ds.uwind.values * units('m/s'), ds.vwind.values* units('m/s'), ds.wwind.values * units('m/s'))\n\n    def setup(self, ds):\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "bound_layer_turbulence_benchmarks.TimeSuite.time_tke",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "bound_layer_turbulence_benchmarks:13",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.06",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_add_height_to_pressure": {
        "code": "class TimeSuite:\n    def time_add_height_to_pressure(self, timeSlice):\n        \"\"\"Benchmarking adding height to pressure on a 3d cube\"\"\"\n        mpcalc.add_height_to_pressure(self.timeSlice.pressure.values * units('hPa'),\n                                      self.timeSlice.height.values * units('km'));\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_add_height_to_pressure",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_add_pressure_to_height": {
        "code": "class TimeSuite:\n    def time_add_pressure_to_height(self, timeSlice):\n        \"\"\"Benchmarking adding pressure to height on a 3d cube\"\"\"\n        mpcalc.add_pressure_to_height(self.timeSlice.height, self.timeSlice.pressure)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_add_pressure_to_height",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_density": {
        "code": "class TimeSuite:\n    def time_density(self, pressureSlice):\n        \"\"\"Benchmarking density calculation on a 2d surface\"\"\"\n        mpcalc.density(self.pressureSlice.pressure, self.pressureSlice.temperature, self.pressureSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_density",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_dry_lapse": {
        "code": "class TimeSuite:\n    def time_dry_lapse(self, timeSlice):\n        \"\"\"Benchmarking the dry lapse calculation on a 3d cube\"\"\"\n        mpcalc.dry_lapse(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_dry_lapse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_dry_static_energy": {
        "code": "class TimeSuite:\n    def time_dry_static_energy(self, timeSlice):\n        \"\"\"Benchmarking dry static energy calculation on a 3d cube\"\"\"\n        mpcalc.dry_static_energy(self.timeSlice.height, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_dry_static_energy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_geopotential_to_height": {
        "code": "class TimeSuite:\n    def time_geopotential_to_height(self, timeSlice):\n        \"\"\"Benchmarking the geopotential to height calculation on a 3d cube\"\"\"\n        mpcalc.geopotential_to_height(self.timeSlice.geopotential);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_geopotential_to_height",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential": {
        "code": "class TimeSuite:\n    def time_height_to_geopotential(self, timeSlice):\n        \"\"\"Benchmarking the height to geopotenial calculation on a 3d cube\"\"\"\n        mpcalc.height_to_geopotential(self.timeSlice.height);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_height_to_geopotential",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_mean_pressure_weighted": {
        "code": "class TimeSuite:\n    def time_mean_pressure_weighted(self, profileSlice):\n        \"\"\"Benchmarking calculating weighted mean of pressure with temp on one profile\"\"\"\n        mpcalc.mean_pressure_weighted(self.profileSlice.pressure, self.profileSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_mean_pressure_weighted",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_potential_temperature": {
        "code": "class TimeSuite:\n    def time_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking the potential temperature calculation on a 3d cube\"\"\"\n        mpcalc.potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_potential_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_sigma_to_pressure": {
        "code": "class TimeSuite:\n    def time_sigma_to_pressure(self, timeSlice):\n        \"\"\"Benchmarking the sigma to pressure calculation on a 3d cube\"\"\"\n        mpcalc.sigma_to_pressure(self.timeSlice.sigma, self.timeSlice.pressure[0], self.timeSlice.pressure[49])\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_sigma_to_pressure",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_static_stability": {
        "code": "class TimeSuite:\n    def time_static_stability(self, timeSlice):\n        \"\"\"Benchmarking static stability calculation on a 3d cube\"\"\"\n        mpcalc.static_stability(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_static_stability",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_temperature_from_potential_temperature": {
        "code": "class TimeSuite:\n    def time_temperature_from_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking calculating temperature from potential temperature on a 3d cube\"\"\"\n        mpcalc.temperature_from_potential_temperature(self.timeSlice.pressure, self.timeSlice.theta);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_temperature_from_potential_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic": {
        "code": "class TimeSuite:\n    def time_thickness_hydrostatic(self, timeSlice):\n        \"\"\"Benchmarking hydrostatic thickness calculation on a 3d cube\"\"\"\n        mpcalc.thickness_hydrostatic(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dry_thermo_benchmarks.TimeSuite.time_weighted_continuous_average": {
        "code": "class TimeSuite:\n    def time_weighted_continuous_average(self, profileSlice):\n        \"\"\"Bencharmking calculating weighted continuous average on one profile\"\"\"\n        mpcalc.weighted_continuous_average(self.profileSlice.pressure, self.profileSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "dry_thermo_benchmarks.TimeSuite.time_weighted_continuous_average",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dry_thermo_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.09",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_absolute_momentum": {
        "code": "class TimeSuite:\n    def time_absolute_momentum(self, cross):\n        \"\"\"Benchmarking absolute momentum calculation\"\"\"\n        mpcalc.absolute_momentum(self.cross.uwind, self.cross.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_absolute_momentum",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity": {
        "code": "class TimeSuite:\n    def time_absolute_vorticity(self, pressureSlice):\n        \"\"\"benchmarking absolute momentum calculation on a 2d surface\"\"\"\n        mpcalc.absolute_vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_absolute_vorticity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_advection": {
        "code": "class TimeSuite:\n    def time_advection(self, timeSlice):\n        \"\"\"Benchmarking the advection calculation of t on a 3d cube\"\"\"\n        mpcalc.advection(self.timeSlice.temperature, self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_advection",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind": {
        "code": "class TimeSuite:\n    def time_ageostrophic_wind(self, pressureSlice):\n        \"\"\"Benchmarking ageostrophic wind calculation on a 2d surface\"\"\"\n        mpcalc.ageostrophic_wind(self.pressureSlice.height, self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_ageostrophic_wind",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_coriolis_parameter": {
        "code": "class TimeSuite:\n    def time_coriolis_parameter(self, timeSlice):\n        \"\"\"Benchmarking coriolis parameter calculation on a 3d cube\"\"\"\n        mpcalc.coriolis_parameter(self.timeSlice.lat);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_coriolis_parameter",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_curvature_vorticity": {
        "code": "class TimeSuite:\n    def time_curvature_vorticity(self, timeSlice):\n        \"\"\"Benchmarking the curvature vorticity calculation on a 3d cube\"\"\"\n        mpcalc.curvature_vorticity(self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_curvature_vorticity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_divergence": {
        "code": "class TimeSuite:\n    def time_divergence(self, timeSlice):\n        \"\"\"Benchmarking divergence on a 3d cube\"\"\"\n        mpcalc.divergence(self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_divergence",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_frontogenesis": {
        "code": "class TimeSuite:\n    def time_frontogenesis(self, pressureSlice):\n        \"\"\"Benchmarking the calculation of frontogenesis of a 2d field\"\"\"\n        mpcalc.frontogenesis(self.pressureSlice.theta, self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_frontogenesis",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_geostrophic_wind": {
        "code": "class TimeSuite:\n    def time_geostrophic_wind(self, timeSlice):\n        \"\"\"Benchmarking the geostrophic wind calculation on a 3d cube\"\"\"\n        mpcalc.geostrophic_wind(self.timeSlice.height, latitude = self.timeSlice.lat)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_geostrophic_wind",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_inertal_advective_wind": {
        "code": "class TimeSuite:\n    def time_inertal_advective_wind(self, timeSlice):\n        \"\"\"Benchmarking inertal advective wind calculation on a 3d cube\"\"\"\n        mpcalc.inertial_advective_wind(self.timeSlice.uwind, self.timeSlice.vwind,\n                                       self.timeSlice.uwind, self.timeSlice.vwind)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_inertal_advective_wind",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_montgomery_streamfunction": {
        "code": "class TimeSuite:\n    def time_montgomery_streamfunction(self, pressureSlice):\n        \"\"\"Benchmarking the montgomery streamfunction calculation on a 2d grid\"\"\"\n        mpcalc.montgomery_streamfunction(self.pressureSlice.height, self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_montgomery_streamfunction",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_baroclinic": {
        "code": "class TimeSuite:\n    def time_potential_vorticity_baroclinic(self, timeSlice):\n        \"\"\"Benchmarking potential vorticity baroclinic on a 3d cube\"\"\"\n        mpcalc.potential_vorticity_baroclinic(self.timeSlice.theta, self.timeSlice.pressure,\n                                              self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_baroclinic",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic": {
        "code": "class TimeSuite:\n    def time_potential_vorticity_barotropic(self, timeSlice):\n        \"\"\"Benchmarking the barotropic potential vorticity calculation on a cube\"\"\"\n        mpcalc.potential_vorticity_barotropic(self.timeSlice.height, self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_potential_vorticity_barotropic",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_q_vector": {
        "code": "class TimeSuite:\n    def time_q_vector(self, pressureSlice):\n        \"\"\"Benchmarking q vector calculation on a 2d slice\"\"\"\n        mpcalc.q_vector(self.pressureSlice.uwind, self.pressureSlice.vwind,\n                        self.pressureSlice.temperature, self.pressureSlice.pressure);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_q_vector",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_shear_vorticity": {
        "code": "class TimeSuite:\n    def time_shear_vorticity(self, pressureSlice):\n        \"\"\"Benchmarking shear vorticity on a 2d slice\"\"\"\n        mpcalc.shear_vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_shear_vorticity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_shearing_deformation": {
        "code": "class TimeSuite:\n    def time_shearing_deformation(self, timeSlice):\n        \"\"\"Benchmarking shearing deformation on a 3d cube\"\"\"\n        mpcalc.shearing_deformation(self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_shearing_deformation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_stretching_deformation": {
        "code": "class TimeSuite:\n    def time_stretching_deformation(self, timeSlice):\n        \"\"\"Benchmarking stretching deformation on a 3d cube\"\"\"\n        mpcalc.stretching_deformation(self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_stretching_deformation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_total_deformation": {
        "code": "class TimeSuite:\n    def time_total_deformation(self, pressureSlice):\n        \"\"\"Benchmarking total deformation calculation on a 2d slice\"\"\"\n        mpcalc.total_deformation(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_total_deformation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_vorticity": {
        "code": "class TimeSuite:\n    def time_vorticity(self, pressureSlice):\n        \"\"\"Benchmarking vorticity calculation on a 2d slice\"\"\"\n        mpcalc.vorticity(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_vorticity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_wind_components": {
        "code": "class TimeSuite:\n    def time_wind_components(self, timeSlice):\n        \"\"\"Benchmarking the wind components calculation on a 3d cube\"\"\"\n        mpcalc.wind_components(self.timeSlice.windspeed, self.timeSlice.winddir)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_wind_components",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_wind_direction": {
        "code": "class TimeSuite:\n    def time_wind_direction(self, timeSlice):\n        \"\"\"Benchmarking the wind direction calculation on a 3d cube\"\"\"\n        mpcalc.wind_direction(self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_wind_direction",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "dyn_kin_benchmarks.TimeSuite.time_wind_speed": {
        "code": "class TimeSuite:\n    def time_wind_speed(self, timeSlice):\n        \"\"\"Benchmarking wind speed calculation on a 3d cube\"\"\"\n        mpcalc.wind_speed(self.timeSlice.uwind, self.timeSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf();\n       return ds;",
        "min_run_count": 2,
        "name": "dyn_kin_benchmarks.TimeSuite.time_wind_speed",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "dyn_kin_benchmarks:14",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_cross_section_components": {
        "code": "class TimeSuite:\n    def time_cross_section_components(self, cross):\n        \"\"\"Benchmarking the cross section components of a wind grid\"\"\"\n        mpcalc.cross_section_components(self.cross.uwind, self.cross.vwind)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_cross_section_components",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_geospatial_gradient": {
        "code": "class TimeSuite:\n    def time_geospatial_gradient(self, pressureSlice):\n        \"\"\"Benchmarking calculating the geospatial gradient of temp on a 2d array\"\"\"\n        mpcalc.geospatial_gradient(self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_geospatial_gradient",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_geospatial_laplacian": {
        "code": "class TimeSuite:\n    def time_geospatial_laplacian(self, pressureSlice):\n        \"\"\"Benchmarking calculating the geospatial laplacian of temp on a 2d array\"\"\"\n        mpcalc.geospatial_laplacian(self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_geospatial_laplacian",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_gradient": {
        "code": "class TimeSuite:\n    def time_gradient(self, timeSlice):\n        \"\"\"Benchmarking calculating the gradient of temp on a 3d cube\"\"\"\n        mpcalc.gradient(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_gradient",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_normal_component": {
        "code": "class TimeSuite:\n    def time_normal_component(self, cross):\n        \"\"\"Benchmarking the calculating normal components times\"\"\"\n        mpcalc.normal_component(self.cross.uwind, self.cross.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_normal_component",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_tangential_component": {
        "code": "class TimeSuite:\n    def time_tangential_component(self, cross):\n        \"\"\"Benchmarking calculation of the tangential component of wind on a slice\"\"\"\n        mpcalc.tangential_component(self.cross.uwind, self.cross.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_tangential_component",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "math_fctn_benchmarks.TimeSuite.time_vector_derivative": {
        "code": "class TimeSuite:\n    def time_vector_derivative(self, pressureSlice):\n        \"\"\"Benchmarking calculating the vector derivative of wind on a 2d slice\"\"\"\n        mpcalc.vector_derivative(self.pressureSlice.uwind, self.pressureSlice.vwind);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       start = (30., 260.)\n       end = (40., 270.)\n       self.cross = mpinter.cross_section(self.timeSlice, start, end).set_coords(('lat', 'lon'))\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       ds = ds.metpy.parse_cf()\n       return ds;",
        "min_run_count": 2,
        "name": "math_fctn_benchmarks.TimeSuite.time_vector_derivative",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "math_fctn_benchmarks:12",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.19",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_dewpoint": {
        "code": "class TimeSuite:\n    def time_dewpoint(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from vapor pressure on a 3d cube\"\"\"\n        mpcalc.dewpoint(self.timeSlice.vapor_pressure);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh": {
        "code": "class TimeSuite:\n    def time_dewpoint_from_rh(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from calculated on a 3d cube\"\"\"\n        mpcalc.dewpoint_from_relative_humidity(self.timeSlice.temperature, self.timeSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_rh",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_specific_humidity": {
        "code": "class TimeSuite:\n    def time_dewpoint_from_specific_humidity(self, timeSlice):\n        \"\"\"Benchmarking dewpoint from specific humidity calculation on a 3d cube\"\"\"\n        mpcalc.dewpoint_from_specific_humidity(self.timeSlice.pressure, self.timeSlice.temperature,\n                                               self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_dewpoint_from_specific_humidity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_equivalent_potential_temperature": {
        "code": "class TimeSuite:\n    def time_equivalent_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking equivalent potential temperature calculation on 3d cube\"\"\"\n        mpcalc.equivalent_potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature,\n                                                self.timeSlice.dewpoint)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_equivalent_potential_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_mixing_ratio_from_relative_humidity": {
        "code": "class TimeSuite:\n    def time_mixing_ratio_from_relative_humidity(self, timeSlice):\n        \"\"\"Benchmarking mixing ratio from relative humidity calculation on a 3d cube\"\"\"\n        mpcalc.mixing_ratio_from_relative_humidity(self.timeSlice.pressure, self.timeSlice.temperature,\n                                                   self.timeSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_mixing_ratio_from_relative_humidity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_mixing_ratio_from_specific_humidity": {
        "code": "class TimeSuite:\n    def time_mixing_ratio_from_specific_humidity(self, timeSlice):\n        \"\"\"Benchmarking calculating mixing rato from specific humidity on a 3d cube\"\"\"\n        mpcalc.mixing_ratio_from_specific_humidity(self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_mixing_ratio_from_specific_humidity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_moist_air_poisson_exponent": {
        "code": "class TimeSuite:\n    def time_moist_air_poisson_exponent(self, timeSlice):\n        \"\"\"Benchmarking moist air poisson exponent calculation on a cube\"\"\"\n        mpcalc.moist_air_poisson_exponent(self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_moist_air_poisson_exponent",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_moist_air_specific_heat_pressure": {
        "code": "class TimeSuite:\n    def time_moist_air_specific_heat_pressure(self, timeSlice):\n        \"\"\"Benchmarking moist air specific heat pressure calculation on a 3d cube\"\"\"\n        mpcalc.moist_air_specific_heat_pressure(self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_moist_air_specific_heat_pressure",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_moist_lapse": {
        "code": "class TimeSuite:\n    def time_moist_lapse(self, profileSlice):\n        \"\"\"Benchmarking the calculation for the moist lapse rate for one profile\"\"\"\n        mpcalc.moist_lapse(self.profileSlice.pressure.values * units('hPa'), self.profileSlice.temperature[0].values * units('K'));\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_moist_lapse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_moist_static_energy": {
        "code": "class TimeSuite:\n    def time_moist_static_energy(self, timeSlice):\n        \"\"\"Benchmarking moist static energy calculation on a 3d cube\"\"\"\n        mpcalc.moist_static_energy(self.timeSlice.height, self.timeSlice.temperature, self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_moist_static_energy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_precipitable_water": {
        "code": "class TimeSuite:\n    def time_precipitable_water(self, timeSlice):\n        \"\"\"Benchmarking precipitable water calculation for one column\"\"\"\n        mpcalc.precipitable_water(self.timeSlice.pressure, self.timeSlice.dewpoint[0][0]);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_precipitable_water",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_psychrometric_vapor_pressure_wet": {
        "code": "class TimeSuite:\n    def time_psychrometric_vapor_pressure_wet(self, timeSlice):\n        \"\"\"Benchmarking psychrometric vapor pressure calculation on a 3d cube\"\"\"\n        mpcalc.psychrometric_vapor_pressure_wet(self.timeSlice.pressure, self.timeSlice.temperature,\n                                            self.timeSlice.wet_bulb_temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_psychrometric_vapor_pressure_wet",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_dewpoint": {
        "code": "class TimeSuite:\n    def time_relative_humidity_from_dewpoint(self, timeSlice):\n        \"\"\"Benchmarking relative humidity from dewpoint calculation on a 3d cube\"\"\"\n        mpcalc.relative_humidity_from_dewpoint(self.timeSlice.temperature, self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_dewpoint",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_mixing_ratio": {
        "code": "class TimeSuite:\n    def time_relative_humidity_from_mixing_ratio(self, timeSlice):\n        \"\"\"Benchmarking relative humidity from mixing ratio calculation on a 3d cube\"\"\"\n        mpcalc.relative_humidity_from_mixing_ratio(self.timeSlice.pressure, self.timeSlice.temperature,\n                                                   self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_mixing_ratio",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_specific_humidity": {
        "code": "class TimeSuite:\n    def time_relative_humidity_from_specific_humidity(self, timeSlice):\n        \"\"\"Benchmarking relative humidity from specific humidity calculation on a 3d cube\"\"\"\n        mpcalc.relative_humidity_from_specific_humidity(self.timeSlice.pressure, self.timeSlice.temperature,\n                                                        self.timeSlice.specific_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_from_specific_humidity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_wet_psychrometric": {
        "code": "class TimeSuite:\n    def time_relative_humidity_wet_psychrometric(self, timeSlice):\n        \"\"\"Benchmarking the relative humidity from psychometric calculation on a cube\"\"\"\n        mpcalc.relative_humidity_wet_psychrometric(self.timeSlice.pressure, self.timeSlice.temperature,\n                                                   self.timeSlice.wet_bulb_temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_relative_humidity_wet_psychrometric",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio": {
        "code": "class TimeSuite:\n    def time_rh_from_mixing_ratio(self, timeSlice):\n        \"\"\"Benchmarking relative humidity from mixing ratio on a 3d cube\"\"\"\n        mpcalc.relative_humidity_from_mixing_ratio(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_rh_from_mixing_ratio",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_saturation_equivalent_potential_temperature": {
        "code": "class TimeSuite:\n    def time_saturation_equivalent_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking saturation equivalent potential temperature on 3d cube\"\"\"\n        mpcalc.saturation_equivalent_potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_saturation_equivalent_potential_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_saturation_vapor_pressure": {
        "code": "class TimeSuite:\n    def time_saturation_vapor_pressure(self, timeSlice):\n        \"\"\"Benchmarking the saturation vapor pressure calculation for a 3d cube\"\"\"\n        mpcalc.saturation_vapor_pressure(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_saturation_vapor_pressure",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_scale_height": {
        "code": "class TimeSuite:\n    def time_scale_height(self, pressureSlice):\n        \"\"\"Benchmarking the calculation for the scale height of a layer for 2 surfaces\"\"\"\n        mpcalc.scale_height(self.upperSlice.temperature, self.pressureSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_scale_height",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_specific_humidity_from_dewpoint": {
        "code": "class TimeSuite:\n    def time_specific_humidity_from_dewpoint(self, timeSlice):\n        \"\"\"Benchmarking specific humidity from dewpoint calculation on a 3d cube\"\"\"\n        mpcalc.specific_humidity_from_dewpoint(self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_specific_humidity_from_dewpoint",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic_from_relative_humidity": {
        "code": "class TimeSuite:\n    def time_thickness_hydrostatic_from_relative_humidity(self, profileSlice):\n        \"\"\"Benchmarking thickness hydrostatic calculation from relative humidity on one profile\"\"\"\n        mpcalc.thickness_hydrostatic_from_relative_humidity(self.profileSlice.pressure, self.profileSlice.temperature,\n                                                            self.profileSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_thickness_hydrostatic_from_relative_humidity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_vertical_velocity": {
        "code": "class TimeSuite:\n    def time_vertical_velocity(self, timeSlice):\n        \"\"\"Benchmarking vertical velocity calculation on a 3d cube\"\"\"\n        mpcalc.vertical_velocity(self.timeSlice.omega, self.timeSlice.pressure, self.timeSlice.temperature,\n                                 self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_vertical_velocity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_vertical_velocity_pressure": {
        "code": "class TimeSuite:\n    def time_vertical_velocity_pressure(self, timeSlice):\n        \"\"\"Benchmarking vertical velocity wrt pressure calculation on a 3d cube\"\"\"\n        mpcalc.vertical_velocity_pressure(self.timeSlice.wwind, self.timeSlice.pressure, self.timeSlice.temperature,\n                                          self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_vertical_velocity_pressure",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_potential_temperature": {
        "code": "class TimeSuite:\n    def time_virtual_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking virtual potential temperature calculation on a 3d cube\"\"\"\n        mpcalc.virtual_potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature,\n                                             self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_potential_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature": {
        "code": "class TimeSuite:\n    def time_virtual_temperature(self, timeSlice):\n        \"\"\"Benchmark virtual temperature on a 3d cube.\"\"\"\n        mpcalc.virtual_temperature(self.timeSlice.temperature, self.timeSlice.mixing_ratio);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_from_dewpoint": {
        "code": "class TimeSuite:\n    def time_virtual_temperature_from_dewpoint(self, timeSlice):\n        \"\"\"Benchmarking virtual temperature from dewpoint calculation on 3d cube\"\"\"\n        mpcalc.virtual_temperature_from_dewpoint(self.timeSlice.pressure, self.timeSlice.temperature,\n                                                 self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_virtual_temperature_from_dewpoint",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_melting": {
        "code": "class TimeSuite:\n    def time_water_latent_heat_melting(self, timeSlice):\n        \"\"\"Benchmarking the melting latent heat calculation on a 3d cube\"\"\"\n        mpcalc.water_latent_heat_melting(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_melting",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_sublimation": {
        "code": "class TimeSuite:\n    def time_water_latent_heat_sublimation(self, timeSlice):\n        \"\"\"Benchmarking the sublimation latent heat calcultion on a 3d cube\"\"\"\n        mpcalc.water_latent_heat_sublimation(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_sublimation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_vaporization": {
        "code": "class TimeSuite:\n    def time_water_latent_heat_vaporization(self, timeSlice):\n        \"\"\"Benchmarking the vaporization latent heat calculation on a 3d cube\"\"\"\n        mpcalc.water_latent_heat_vaporization(self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_water_latent_heat_vaporization",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_potential_temperature": {
        "code": "class TimeSuite:\n    def time_wet_bulb_potential_temperature(self, timeSlice):\n        \"\"\"Benchmarking the wet bulb potential temperature calculation on a 3d cube\"\"\"\n        mpcalc.wet_bulb_potential_temperature(self.timeSlice.pressure, self.timeSlice.temperature,\n                                              self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_potential_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature": {
        "code": "class TimeSuite:\n    def time_wet_bulb_temperature(self, pressureSlice):\n        \"\"\"Benchmarking wet bulb temperature calculation on on a slice\"\"\"\n        mpcalc.wet_bulb_temperature(self.pressureSlice.pressure, self.pressureSlice.temperature, self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.upperSlice = ds.isel(pressure = 49, time = 0)\n       self.profileSlice = ds.isel(time = 0, lat = 25, lon = 25)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "moist_thermo_benchmarks.TimeSuite.time_wet_bulb_temperature",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "moist_thermo_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_find_intersections": {
        "code": "class TimeSuite:\n    def time_find_intersections(self, lineSlice):\n        \"\"\"benchmarking finding intersections calculation\"\"\"\n        mpcalc.find_intersections(self.lineSlice.lon, self.lineSlice.temperature, self.lineSlice.dewpoint);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_find_intersections",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_find_peaks": {
        "code": "class TimeSuite:\n    def time_find_peaks(self, pressureSlice):\n        \"\"\"Benchmarking finding peaks of 2d dewpoint slice\"\"\"\n        mpcalc.find_peaks(self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_find_peaks",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_get_perturbation": {
        "code": "class TimeSuite:\n    def time_get_perturbation(self, ds):\n        \"\"\"Benchmarking getting the perturbation of a time series\"\"\"\n        mpcalc.get_perturbation(self.ds.temperature)\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_get_perturbation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_isentropic_interpolation": {
        "code": "class TimeSuite:\n    def time_isentropic_interpolation(self, timeSlice):\n        \"\"\"Bencharking the isentropic interpolation calculation on a 3d cube\"\"\"\n        mpcalc.isentropic_interpolation([265.] * units.kelvin, self.timeSlice.pressure, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_isentropic_interpolation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_isentropic_interpolation_as_dataset": {
        "code": "class TimeSuite:\n    def time_isentropic_interpolation_as_dataset(self, timeSlice):\n        \"\"\"Benchmarking the isentropic interpolation as dataset calculation on a 3d cube\"\"\"\n        mpcalc.isentropic_interpolation_as_dataset([265.] * units.kelvin, self.timeSlice.temperature);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_isentropic_interpolation_as_dataset",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "other_benchmarks.TimeSuite.time_peak_persistence": {
        "code": "class TimeSuite:\n    def time_peak_persistence(self, pressureSlice):\n        \"\"\"Benchmarking calculating persistence of of maxima point in 3d\"\"\"\n        mpcalc.peak_persistence(self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n       self.ds = ds;\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n       self.lineSlice = ds.isel(pressure = 0, time = 0, lat = 0);\n       self.profileSlice = ds.isel(time = 0, lat = 0, lon = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "other_benchmarks.TimeSuite.time_peak_persistence",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "other_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_circular": {
        "code": "class TimeSuite:\n    def time_smooth_circular(self, pressureSlice):\n        \"\"\"Benchmarking the circular smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_circular(self.pressureSlice.relative_humidity, 2);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_circular",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_gaussian": {
        "code": "class TimeSuite:\n    def time_smooth_gaussian(self, pressureSlice):\n        \"\"\"Benchmarking the gaussian smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_gaussian(self.pressureSlice.relative_humidity, 5);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_gaussian",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_n_point": {
        "code": "class TimeSuite:\n    def time_smooth_n_point(self, pressureSlice):\n        \"\"\"Benchmarking the 5 point smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_n_point(self.pressureSlice.relative_humidity);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_n_point",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_rectangular": {
        "code": "class TimeSuite:\n    def time_smooth_rectangular(self, pressureSlice):\n        \"\"\"Benchmarking the rectangular smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_rectangular(self.pressureSlice.relative_humidity, (3, 7));\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_rectangular",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_smooth_window": {
        "code": "class TimeSuite:\n    def time_smooth_window(self, pressureSlice):\n        \"\"\"Benchmarking the window smoothing of a 2d grid\"\"\"\n        mpcalc.smooth_window(self.pressureSlice.relative_humidity, np.diag(np.ones(5)))\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_smooth_window",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "smoothing_benchmarks.TimeSuite.time_zoom_xarray": {
        "code": "class TimeSuite:\n    def time_zoom_xarray(self, pressureSlice):\n        \"\"\"Benchmarking the zoom xarray function\"\"\"\n        mpcalc.zoom_xarray(self.pressureSlice.temperature, zoom = 3.0);\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "smoothing_benchmarks.TimeSuite.time_zoom_xarray",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "smoothing_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_bulk_shear": {
        "code": "class TimeSuite:\n    def time_bulk_shear(self, profileSlice):\n        \"\"\"Benchmarking calculating the bulk shear of a profile\"\"\"\n        mpcalc.bulk_shear(self.profileSlice.pressure, self.profileSlice.uwind, self.profileSlice.vwind);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_bulk_shear",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_bunkers_storm_motion": {
        "code": "class TimeSuite:\n    def time_bunkers_storm_motion(self, profileSlice):\n        \"\"\"Benchmarking bunkers storm motion on one profile\"\"\"\n        mpcalc.bunkers_storm_motion(self.profileSlice.pressure, self.profileSlice.uwind,\n                                    self.profileSlice.vwind, self.profileSlice.height)\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_bunkers_storm_motion",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_cape_cin": {
        "code": "class TimeSuite:\n    def time_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking cape_cin calculation for one profile\"\"\"\n        mpcalc.cape_cin(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint, self.parcelProfile);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_cape_cin",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_ccl": {
        "code": "class TimeSuite:\n    def time_ccl(self, profileSlice):\n        \"\"\"Benchmarking calculating the convective condensation level of a profile\"\"\"\n        mpcalc.ccl(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_ccl",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_corfidi_storm_motion": {
        "code": "class TimeSuite:\n    def time_corfidi_storm_motion(self, profileSlice):\n        \"\"\"Benchmarking corfidi storm motion on one profile\"\"\"\n        mpcalc.corfidi_storm_motion(self.profileSlice.pressure, self.profileSlice.uwind,\n                                    self.profileSlice.vwind);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_corfidi_storm_motion",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_critical_angle": {
        "code": "class TimeSuite:\n    def time_critical_angle(self, profileSlice):\n        \"\"\"Benchmarking critical angle on one profile\"\"\"\n        mpcalc.critical_angle(self.profileSlice.pressure, self.profileSlice.uwind,\n                              self.profileSlice.vwind, self.profileSlice.height,\n                              0 * units('m/s'), 0 * units('m/s'));\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_critical_angle",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_cross_totals": {
        "code": "class TimeSuite:\n    def time_cross_totals(self, timeSlice):\n        \"\"\"Benchmarking cross totals calculation on many profiles\"\"\"\n        mpcalc.cross_totals(self.timeSlice.pressure, self.timeSlice.temperature,\n                            self.timeSlice.dewpoint)\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_cross_totals",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_downdraft_cape": {
        "code": "class TimeSuite:\n    def time_downdraft_cape(self, profileSlice):\n        \"\"\"Benchmarking downdraft cape calculation on one profile\"\"\"\n        mpcalc.downdraft_cape(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_downdraft_cape",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_el": {
        "code": "class TimeSuite:\n    def time_el(self, profileSlice):\n        \"\"\"Benchmarks el calculation on one profile\"\"\"\n        mpcalc.el(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_el",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_galvez_davison_index": {
        "code": "class TimeSuite:\n    def time_galvez_davison_index(self, timeSlice):\n        \"\"\"Benchmarking calculating the galvez davison index on many profiles\"\"\"\n        mpcalc.galvez_davison_index(self.timeSlice.pressure, self.timeSlice.temperature,\n                                    self.timeSlice.mixing_ratio, self.timeSlice.pressure[0])\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_galvez_davison_index",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_k_index": {
        "code": "class TimeSuite:\n    def time_k_index(self, timeSlice):\n        \"\"\"Benchmarking k index calculation on many profiles\"\"\"\n        mpcalc.k_index(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_k_index",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_lcl": {
        "code": "class TimeSuite:\n    def time_lcl(self, timeSlice):\n        \"\"\"Benchmarks lcl on a 3d cube - many profiles\"\"\"\n        mpcalc.lcl(self.pressureSlice.pressure, self.pressureSlice.temperature, self.pressureSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_lcl",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_lfc": {
        "code": "class TimeSuite:\n    def time_lfc(self, profileSlice):\n        \"\"\"Benchmarking level of free convection calculation for one profile\"\"\"\n        mpcalc.lfc(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_lfc",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_lifted_index": {
        "code": "class TimeSuite:\n    def time_lifted_index(self, profileSlice):\n        \"\"\"Benchmarking lifted index calculation on one profile\"\"\"\n        mpcalc.lifted_index(self.profileSlice.pressure, self.profileSlice.temperature,\n                            self.parcelProfile);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_lifted_index",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_mixed_layer_cape_cin": {
        "code": "class TimeSuite:\n    def time_mixed_layer_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking mixed layer cape cin calculation for one profile\"\"\"\n        mpcalc.mixed_layer_cape_cin(self.profileSlice.pressure, self.profileSlice.temperature,\n                                    self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_mixed_layer_cape_cin",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_mixed_parcel": {
        "code": "class TimeSuite:\n    def time_mixed_parcel(self, profileSlice):\n        \"\"\"Benchmarking mixed parcel for one profile\"\"\"\n        mpcalc.mixed_parcel(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_mixed_parcel",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_most_unstable_cape_cin": {
        "code": "class TimeSuite:\n    def time_most_unstable_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking most unstable cape cin calculation on one profile\"\"\"\n        mpcalc.most_unstable_cape_cin(self.profileSlice.pressure, self.profileSlice.temperature,\n                                      self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_most_unstable_cape_cin",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_most_unstable_parcel": {
        "code": "class TimeSuite:\n    def time_most_unstable_parcel(self, profileSlice):\n        \"\"\"Benchmarking the calculation to find the most unstable parcel for one profile\"\"\"\n        mpcalc.most_unstable_parcel(self.profileSlice.pressure, self.profileSlice.temperature, self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_most_unstable_parcel",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_parcel_profile": {
        "code": "class TimeSuite:\n    def time_parcel_profile(self, profileSlice):\n        \"\"\"Benchmarking the atmospheric parcel profile for one profile\"\"\"\n        mpcalc.parcel_profile(self.profileSlice.pressure, self.profileSlice.temperature[0], self.profileSlice.dewpoint[0]);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_parcel_profile",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_parcel_profile_with_lcl_as_dataset": {
        "code": "class TimeSuite:\n    def time_parcel_profile_with_lcl_as_dataset(self, profileSlice):\n        \"\"\"Benchmarking parcel profile with lcl as dataset one on profile\"\"\"\n        mpcalc.parcel_profile_with_lcl_as_dataset(self.profileSlice.pressure, self.profileSlice.temperature,\n                                                  self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_parcel_profile_with_lcl_as_dataset",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_showalter_index": {
        "code": "class TimeSuite:\n    def time_showalter_index(self, profileSlice):\n        \"\"\"Benchmarking calculating the showalter index on one profiles\"\"\"\n        mpcalc.showalter_index(self.profileSlice.pressure, self.profileSlice.temperature,\n                               self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_showalter_index",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_significant_tornado": {
        "code": "class TimeSuite:\n    def time_significant_tornado(self, profileSlice):\n        \"\"\"Benchmarking significant tornado param for one profile\"\"\"\n        mpcalc.significant_tornado(self.sbcape, self.sblclheight, self.relhel, self.shear);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_significant_tornado",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_storm_relative_helicity": {
        "code": "class TimeSuite:\n    def time_storm_relative_helicity(self, profileSlice):\n        \"\"\"Benchmarks storm relative helicity over one profile\"\"\"\n        mpcalc.storm_relative_helicity(self.profileSlice.height, self.profileSlice.uwind,\n                                       self.profileSlice.vwind, 1 * units('km'))\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_storm_relative_helicity",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_supercell_composite": {
        "code": "class TimeSuite:\n    def time_supercell_composite(self, profileSlice):\n        \"\"\"Benchmarks supercell composite calculation for one calculation\"\"\"\n        mpcalc.supercell_composite(2500 * units('J/kg'), 125 * units('m^2/s^2'), 50 * units.knot)\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_supercell_composite",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_surface_based_cape_cin": {
        "code": "class TimeSuite:\n    def time_surface_based_cape_cin(self, profileSlice):\n        \"\"\"Benchmarking surface based cape cin calculation on one profile\"\"\"\n        mpcalc.surface_based_cape_cin(self.profileSlice.pressure, self.profileSlice.temperature,\n                                      self.profileSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_surface_based_cape_cin",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_sweat_index": {
        "code": "class TimeSuite:\n    def time_sweat_index(self, timeSlice):\n        \"\"\"Benchmarking SWEAT index on many profiles\"\"\"\n        mpcalc.sweat_index(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.dewpoint,\n                           self.timeSlice.windspeed, self.timeSlice.winddir);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_sweat_index",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_total_totals_index": {
        "code": "class TimeSuite:\n    def time_total_totals_index(self, timeSlice):\n        \"\"\"Benchmarking total totals index for many profiles\"\"\"\n        mpcalc.total_totals_index(self.timeSlice.pressure, self.timeSlice.temperature, self.timeSlice.dewpoint);\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_total_totals_index",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "soundings_benchmarks.TimeSuite.time_vertical_totals": {
        "code": "class TimeSuite:\n    def time_vertical_totals(self, timeSlice):\n        \"\"\"Benchmarking vertical totals for many profiles\"\"\"\n        mpcalc.vertical_totals(self.timeSlice.pressure, self.timeSlice.temperature);\n        mpcalc.storm_relative_helicity(self.profileSlice.height, self.profileSlice.uwind, self.profileSlice.vwind, depth = 1 * units('km'))\n\n    def setup(self, ds):\n        self.timeSlice = ds.isel(time = 0)\n        self.pressureSlice = ds.isel(time = 0, pressure = 0);\n        self.profileSlice = ds.isel(lat = 25, lon = 25, time = 0)\n        self.parcelProfile = mpcalc.parcel_profile(self.profileSlice.pressure,\n                                                  self.profileSlice.temperature[0],\n                                                  self.profileSlice.dewpoint[0]);\n        self.sbcape, _ = mpcalc.surface_based_cape_cin(self.profileSlice.pressure,\n                                                    self.profileSlice.temperature,\n                                                    self.profileSlice.dewpoint)\n        self.sblcl, _ = mpcalc.lcl(self.profileSlice.pressure,\n                                self.profileSlice.temperature,\n                                self.profileSlice.dewpoint)\n        self.sblclheight = mpcalc.pressure_to_height_std(self.sblcl)\n        _, _, self.relhel = mpcalc.storm_relative_helicity(self.profileSlice.height,\n                                                     self.profileSlice.uwind,\n                                                     self.profileSlice.vwind,\n                                                     1 * units('km'))\n        self.shearu, self.shearv = mpcalc.bulk_shear(self.profileSlice.pressure,\n                                       self.profileSlice.uwind,\n                                       self.profileSlice.vwind);\n        self.shear = mpcalc.wind_speed(self.shearu, self.shearv);\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "soundings_benchmarks.TimeSuite.time_vertical_totals",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "soundings_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.16",
        "warmup_time": -1
    },
    "std_atm_benchmarks.TimeSuite.time_altimeter_to_sea_level_pressure": {
        "code": "class TimeSuite:\n    def time_altimeter_to_sea_level_pressure(self, timeSlice):\n        \"\"\"Benchmarking altimeter to slp on a 3d cube\"\"\"\n        mpcalc.altimeter_to_sea_level_pressure(self.timeSlice.pressure.values * units('hPa'), self.timeSlice.height.values * units('km'),\n                                               self.timeSlice.temperature * units('K'));\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "std_atm_benchmarks.TimeSuite.time_altimeter_to_sea_level_pressure",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "std_atm_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "std_atm_benchmarks.TimeSuite.time_height_to_pressure_std": {
        "code": "class TimeSuite:\n    def time_height_to_pressure_std(self, timeSlice):\n        \"\"\"Benchmarking the height to pressure calculation in a standard atmosphere on a 3d cube\"\"\"\n        mpcalc.height_to_pressure_std(self.timeSlice.height)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "std_atm_benchmarks.TimeSuite.time_height_to_pressure_std",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "std_atm_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "std_atm_benchmarks.TimeSuite.time_pressure_to_height_std": {
        "code": "class TimeSuite:\n    def time_pressure_to_height_std(self, timeSlice):\n        \"\"\"Benchmarking the pressure to height calculation in a standard atmosphere on a 3d cube\"\"\"\n        mpcalc.pressure_to_height_std(self.timeSlice.pressure)\n\n    def setup(self, ds):\n       self.pressureSlice = ds.isel(pressure = 0, time = 0)\n       self.timeSlice = ds.isel(time = 0)\n\n    def setup_cache(self):\n       base_path = os.path.dirname(__file__) # path to current file\n       file_path = os.path.join(base_path, \"..\", \"data_array_compressed.nc\");\n       file_path = os.path.abspath(file_path)\n       ds = xr.open_dataset(file_path)\n       return ds;",
        "min_run_count": 2,
        "name": "std_atm_benchmarks.TimeSuite.time_pressure_to_height_std",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "std_atm_benchmarks:11",
        "type": "time",
        "unit": "seconds",
        "version": "2025.06.11",
        "warmup_time": -1
    },
    "version": 2
}